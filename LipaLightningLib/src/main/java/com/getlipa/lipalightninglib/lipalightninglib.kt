// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.lipalightninglib;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_uniffi_lipalightninglib_rustbuffer_alloc(size, status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: Int, len: Int, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity
            buf.len = len
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_uniffi_lipalightninglib_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus();
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    // Needed until https://youtrack.jetbrains.com/issue/KT-47902 is fixed.
    @Deprecated("`toInt().toChar()` is deprecated")
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize): T? {
        return map.remove(handle)
    }
}

// FFI type for Rust future continuations
internal interface UniFffiRustFutureContinuationCallbackType : com.sun.jna.Callback {
    fun callback(continuationHandle: USize, pollResult: Byte);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_lipalightninglib"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "lipalightninglib")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                uniffiCallbackInterfaceEventsCallback.register(lib)
                }
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_uniffi_lipalightninglib_fn_clone_lightningnode(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_uniffi_lipalightninglib_fn_free_lightningnode(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_constructor_lightningnode_new(`config`: RustBuffer.ByValue,`eventsCallback`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_accept_pocket_terms_and_conditions(`ptr`: Pointer,`version`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_background(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_calculate_lightning_payout_fee(`ptr`: Pointer,`offer`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_calculate_lsp_fee(`ptr`: Pointer,`amountSat`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_change_fiat_currency(`ptr`: Pointer,`fiatCurrency`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_change_timezone_config(`ptr`: Pointer,`timezoneConfig`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_clear_wallet(`ptr`: Pointer,`clearWalletInfo`: RustBuffer.ByValue,`destinationOnchainAddressData`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_create_invoice(`ptr`: Pointer,`amountSat`: Long,`lspFeeParams`: RustBuffer.ByValue,`description`: RustBuffer.ByValue,`metadata`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_decode_data(`ptr`: Pointer,`data`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_foreground(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_generate_swap_address(`ptr`: Pointer,`lspFeeParams`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_channel_close_resolving_fees(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_exchange_rate(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_health_status(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_invoice_affordability(`ptr`: Pointer,`amountSat`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_latest_activities(`ptr`: Pointer,`numberOfActivities`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_node_info(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_payment(`ptr`: Pointer,`hash`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_payment_amount_limits(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_payment_max_routing_fee_mode(`ptr`: Pointer,`amountSat`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_payment_uuid(`ptr`: Pointer,`paymentHash`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_terms_and_conditions_status(`ptr`: Pointer,`termsAndConditions`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_unresolved_failed_swaps(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_wallet_pubkey_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_hide_topup(`ptr`: Pointer,`id`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_is_clear_wallet_feasible(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_list_currency_codes(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_list_lightning_addresses(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_log_debug_info(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_pay_invoice(`ptr`: Pointer,`invoiceDetails`: RustBuffer.ByValue,`metadata`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_pay_lnurlp(`ptr`: Pointer,`lnurlPayRequestData`: RustBuffer.ByValue,`amountSat`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_pay_open_invoice(`ptr`: Pointer,`invoiceDetails`: RustBuffer.ByValue,`amountSat`: Long,`metadata`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_prepare_clear_wallet(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_prepare_resolve_failed_swap(`ptr`: Pointer,`failedSwapInfo`: RustBuffer.ByValue,`toAddress`: RustBuffer.ByValue,`onchainFeeRate`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_prepare_sweep(`ptr`: Pointer,`address`: RustBuffer.ByValue,`onchainFeeRate`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_query_lsp_fee(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_query_onchain_fee_rate(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_query_uncompleted_offers(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_register_fiat_topup(`ptr`: Pointer,`email`: RustBuffer.ByValue,`userIban`: RustBuffer.ByValue,`userCurrency`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_register_notification_token(`ptr`: Pointer,`notificationToken`: RustBuffer.ByValue,`languageIso6391`: RustBuffer.ByValue,`countryIso31661Alpha2`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_request_offer_collection(`ptr`: Pointer,`offer`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_reset_fiat_topup(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_resolve_failed_swap(`ptr`: Pointer,`resolveFailedSwapInfo`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_retrieve_latest_fiat_topup_info(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_swap_onchain_to_lightning(`ptr`: Pointer,`satsPerVbyte`: Int,`lspFeeParams`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_method_lightningnode_sweep(`ptr`: Pointer,`sweepInfo`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_init_callback_eventscallback(`handle`: ForeignCallback,
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_func_accept_terms_and_conditions(`environment`: RustBuffer.ByValue,`seed`: RustBuffer.ByValue,`version`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_func_generate_secret(`passphrase`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_func_get_terms_and_conditions_status(`environment`: RustBuffer.ByValue,`seed`: RustBuffer.ByValue,`termsAndConditions`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_func_mnemonic_to_secret(`mnemonicString`: RustBuffer.ByValue,`passphrase`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_uniffi_lipalightninglib_fn_func_recover_lightning_node(`environment`: RustBuffer.ByValue,`seed`: RustBuffer.ByValue,`localPersistencePath`: RustBuffer.ByValue,`enableFileLogging`: Byte,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_fn_func_words_by_prefix(`prefix`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_uniffi_lipalightninglib_rustbuffer_alloc(`size`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_uniffi_lipalightninglib_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_uniffi_lipalightninglib_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_uniffi_lipalightninglib_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_uniffi_lipalightninglib_rust_future_poll_u8(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_u8(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_u8(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_u8(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_uniffi_lipalightninglib_rust_future_poll_i8(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_i8(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_i8(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_i8(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_uniffi_lipalightninglib_rust_future_poll_u16(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_u16(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_u16(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_u16(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_uniffi_lipalightninglib_rust_future_poll_i16(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_i16(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_i16(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_i16(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_uniffi_lipalightninglib_rust_future_poll_u32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_u32(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_u32(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_u32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_uniffi_lipalightninglib_rust_future_poll_i32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_i32(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_i32(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_i32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_uniffi_lipalightninglib_rust_future_poll_u64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_u64(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_u64(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_u64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_uniffi_lipalightninglib_rust_future_poll_i64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_i64(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_i64(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_i64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_uniffi_lipalightninglib_rust_future_poll_f32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_f32(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_f32(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_f32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_uniffi_lipalightninglib_rust_future_poll_f64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_f64(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_f64(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_f64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_uniffi_lipalightninglib_rust_future_poll_pointer(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_pointer(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_uniffi_lipalightninglib_rust_future_poll_rust_buffer(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_rust_buffer(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_uniffi_lipalightninglib_rust_future_poll_void(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_cancel_void(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_free_void(`handle`: Pointer,
    ): Unit
    fun ffi_uniffi_lipalightninglib_rust_future_complete_void(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_uniffi_lipalightninglib_checksum_func_accept_terms_and_conditions(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_func_generate_secret(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_func_get_terms_and_conditions_status(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_func_mnemonic_to_secret(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_func_recover_lightning_node(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_func_words_by_prefix(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_accept_pocket_terms_and_conditions(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_background(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_calculate_lightning_payout_fee(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_calculate_lsp_fee(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_change_fiat_currency(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_change_timezone_config(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_clear_wallet(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_create_invoice(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_decode_data(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_foreground(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_generate_swap_address(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_channel_close_resolving_fees(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_exchange_rate(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_health_status(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_invoice_affordability(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_latest_activities(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_node_info(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_payment(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_payment_amount_limits(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_payment_max_routing_fee_mode(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_payment_uuid(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_terms_and_conditions_status(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_unresolved_failed_swaps(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_wallet_pubkey_id(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_hide_topup(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_is_clear_wallet_feasible(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_list_currency_codes(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_list_lightning_addresses(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_log_debug_info(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_pay_invoice(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_pay_lnurlp(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_pay_open_invoice(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_prepare_clear_wallet(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_prepare_resolve_failed_swap(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_prepare_sweep(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_query_lsp_fee(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_query_onchain_fee_rate(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_query_uncompleted_offers(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_register_fiat_topup(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_register_notification_token(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_request_offer_collection(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_reset_fiat_topup(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_resolve_failed_swap(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_retrieve_latest_fiat_topup_info(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_swap_onchain_to_lightning(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_sweep(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_constructor_lightningnode_new(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_eventscallback_payment_received(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_eventscallback_payment_sent(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_eventscallback_payment_failed(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_eventscallback_channel_closed(
    ): Short
    fun uniffi_uniffi_lipalightninglib_checksum_method_eventscallback_breez_health_status_changed_to(
    ): Short
    fun ffi_uniffi_lipalightninglib_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_uniffi_lipalightninglib_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_uniffi_lipalightninglib_checksum_func_accept_terms_and_conditions() != 2731.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_func_generate_secret() != 27916.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_func_get_terms_and_conditions_status() != 32529.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_func_mnemonic_to_secret() != 23900.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_func_recover_lightning_node() != 3892.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_func_words_by_prefix() != 18339.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_accept_pocket_terms_and_conditions() != 31695.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_background() != 28178.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_calculate_lightning_payout_fee() != 47099.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_calculate_lsp_fee() != 41445.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_change_fiat_currency() != 45001.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_change_timezone_config() != 21160.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_clear_wallet() != 22211.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_create_invoice() != 6856.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_decode_data() != 11730.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_foreground() != 21792.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_generate_swap_address() != 19541.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_channel_close_resolving_fees() != 52527.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_exchange_rate() != 15675.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_health_status() != 64525.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_invoice_affordability() != 10343.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_latest_activities() != 8716.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_node_info() != 8992.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_payment() != 52622.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_payment_amount_limits() != 38114.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_payment_max_routing_fee_mode() != 46434.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_payment_uuid() != 55382.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_terms_and_conditions_status() != 53895.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_unresolved_failed_swaps() != 55743.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_get_wallet_pubkey_id() != 48212.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_hide_topup() != 9954.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_is_clear_wallet_feasible() != 27512.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_list_currency_codes() != 24404.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_list_lightning_addresses() != 40035.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_log_debug_info() != 60092.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_pay_invoice() != 55741.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_pay_lnurlp() != 19760.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_pay_open_invoice() != 20722.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_prepare_clear_wallet() != 19083.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_prepare_resolve_failed_swap() != 48057.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_prepare_sweep() != 23224.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_query_lsp_fee() != 32663.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_query_onchain_fee_rate() != 169.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_query_uncompleted_offers() != 16092.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_register_fiat_topup() != 12958.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_register_notification_token() != 23769.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_request_offer_collection() != 9125.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_reset_fiat_topup() != 23479.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_resolve_failed_swap() != 11475.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_retrieve_latest_fiat_topup_info() != 55765.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_swap_onchain_to_lightning() != 56740.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_lightningnode_sweep() != 63698.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_constructor_lightningnode_new() != 6752.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_eventscallback_payment_received() != 64243.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_eventscallback_payment_sent() != 26372.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_eventscallback_payment_failed() != 7221.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_eventscallback_channel_closed() != 22287.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_lipalightninglib_checksum_method_eventscallback_breez_health_status_changed_to() != 40320.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterInt: FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): Int {
        return 4 + value.size
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


public object FfiConverterTimestamp: FfiConverterRustBuffer<java.time.Instant> {
    override fun read(buf: ByteBuffer): java.time.Instant {
        val seconds = buf.getLong()
        // Type mismatch (should be u32) but we check for overflow/underflow below
        val nanoseconds = buf.getInt().toLong()
        if (nanoseconds < 0) {
            throw java.time.DateTimeException("Instant nanoseconds exceed minimum or maximum supported by uniffi")
        }
        if (seconds >= 0) {
            return java.time.Instant.EPOCH.plus(java.time.Duration.ofSeconds(seconds, nanoseconds))
        } else {
            return java.time.Instant.EPOCH.minus(java.time.Duration.ofSeconds(-seconds, nanoseconds))
        }
    }

    // 8 bytes for seconds, 4 bytes for nanoseconds
    override fun allocationSize(value: java.time.Instant) = 12

    override fun write(value: java.time.Instant, buf: ByteBuffer) {
        var epochOffset = java.time.Duration.between(java.time.Instant.EPOCH, value)

        var sign = 1
        if (epochOffset.isNegative()) {
            sign = -1
            epochOffset = epochOffset.negated()
        }

        if (epochOffset.nano < 0) {
            // Java docs provide guarantee that nano will always be positive, so this should be impossible
            // See: https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html
            throw IllegalArgumentException("Invalid timestamp, nano value must be non-negative")
        }

        buf.putLong(sign * epochOffset.seconds)
        // Type mismatch (should be u32) but since values will always be between 0 and 999,999,999 it should be OK
        buf.putInt(epochOffset.nano)
    }
}


public object FfiConverterDuration: FfiConverterRustBuffer<java.time.Duration> {
    override fun read(buf: ByteBuffer): java.time.Duration {
        // Type mismatch (should be u64) but we check for overflow/underflow below
        val seconds = buf.getLong()
        // Type mismatch (should be u32) but we check for overflow/underflow below
        val nanoseconds = buf.getInt().toLong()
        if (seconds < 0) {
            throw java.time.DateTimeException("Duration exceeds minimum or maximum value supported by uniffi")
        }
        if (nanoseconds < 0) {
            throw java.time.DateTimeException("Duration nanoseconds exceed minimum or maximum supported by uniffi")
        }
        return java.time.Duration.ofSeconds(seconds, nanoseconds)
    }

    // 8 bytes for seconds, 4 bytes for nanoseconds
    override fun allocationSize(value: java.time.Duration) = 12

    override fun write(value: java.time.Duration, buf: ByteBuffer) {
        if (value.seconds < 0) {
            // Rust does not support negative Durations
            throw IllegalArgumentException("Invalid duration, must be non-negative")
        }

        if (value.nano < 0) {
            // Java docs provide guarantee that nano will always be positive, so this should be impossible
            // See: https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html
            throw IllegalArgumentException("Invalid duration, nano value must be non-negative")
        }

        // Type mismatch (should be u64) but since Rust doesn't support negative durations we should be OK
        buf.putLong(value.seconds)
        // Type mismatch (should be u32) but since values will always be between 0 and 999,999,999 it should be OK
        buf.putInt(value.nano)
    }
}



// The cleaner interface for Object finalization code to run.
// This is the entry point to any implementation that we're using.
//
// The cleaner registers objects and returns cleanables, so now we are
// defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
// different implmentations available at compile time.
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject: Disposable, AutoCloseable {

    constructor(pointer: Pointer) {
        this.pointer = pointer
    }

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
    }

    protected val pointer: Pointer?
    protected abstract val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open fun uniffiClonePointer(): Pointer {
        // Overridden by generated subclasses, the default method exists to allow users to manually
        // implement the interface
        throw RuntimeException("uniffiClonePointer not implemented")
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }
}

/** Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly. */
object NoPointer


public interface LightningNodeInterface {
    
    fun `acceptPocketTermsAndConditions`(`version`: Long)
    
    fun `background`()
    
    fun `calculateLightningPayoutFee`(`offer`: OfferInfo): Amount
    
    fun `calculateLspFee`(`amountSat`: ULong): CalculateLspFeeResponse
    
    fun `changeFiatCurrency`(`fiatCurrency`: String)
    
    fun `changeTimezoneConfig`(`timezoneConfig`: TzConfig)
    
    fun `clearWallet`(`clearWalletInfo`: ClearWalletInfo, `destinationOnchainAddressData`: BitcoinAddressData)
    
    fun `createInvoice`(`amountSat`: ULong, `lspFeeParams`: OpeningFeeParams?, `description`: String, `metadata`: InvoiceCreationMetadata): InvoiceDetails
    
    fun `decodeData`(`data`: String): DecodedData
    
    fun `foreground`()
    
    fun `generateSwapAddress`(`lspFeeParams`: OpeningFeeParams?): SwapAddressInfo
    
    fun `getChannelCloseResolvingFees`(): ChannelCloseResolvingFees
    
    fun `getExchangeRate`(): ExchangeRate?
    
    fun `getHealthStatus`(): BreezHealthCheckStatus
    
    fun `getInvoiceAffordability`(`amountSat`: ULong): InvoiceAffordability
    
    fun `getLatestActivities`(`numberOfActivities`: UInt): ListActivitiesResponse
    
    fun `getNodeInfo`(): NodeInfo
    
    fun `getPayment`(`hash`: String): Payment
    
    fun `getPaymentAmountLimits`(): PaymentAmountLimits
    
    fun `getPaymentMaxRoutingFeeMode`(`amountSat`: ULong): MaxRoutingFeeMode
    
    fun `getPaymentUuid`(`paymentHash`: String): String
    
    fun `getTermsAndConditionsStatus`(`termsAndConditions`: TermsAndConditions): TermsAndConditionsStatus
    
    fun `getUnresolvedFailedSwaps`(): List<FailedSwapInfo>
    
    fun `getWalletPubkeyId`(): String?
    
    fun `hideTopup`(`id`: String)
    
    fun `isClearWalletFeasible`(): Boolean
    
    fun `listCurrencyCodes`(): List<String>
    
    fun `listLightningAddresses`(): List<String>
    
    fun `logDebugInfo`()
    
    fun `payInvoice`(`invoiceDetails`: InvoiceDetails, `metadata`: PaymentMetadata)
    
    fun `payLnurlp`(`lnurlPayRequestData`: LnUrlPayRequestData, `amountSat`: ULong): String
    
    fun `payOpenInvoice`(`invoiceDetails`: InvoiceDetails, `amountSat`: ULong, `metadata`: PaymentMetadata)
    
    fun `prepareClearWallet`(): ClearWalletInfo
    
    fun `prepareResolveFailedSwap`(`failedSwapInfo`: FailedSwapInfo, `toAddress`: String, `onchainFeeRate`: UInt): ResolveFailedSwapInfo
    
    fun `prepareSweep`(`address`: String, `onchainFeeRate`: UInt): SweepInfo
    
    fun `queryLspFee`(): LspFee
    
    fun `queryOnchainFeeRate`(): UInt
    
    fun `queryUncompletedOffers`(): List<OfferInfo>
    
    fun `registerFiatTopup`(`email`: String?, `userIban`: String, `userCurrency`: String): FiatTopupInfo
    
    fun `registerNotificationToken`(`notificationToken`: String, `languageIso6391`: String, `countryIso31661Alpha2`: String)
    
    fun `requestOfferCollection`(`offer`: OfferInfo): String
    
    fun `resetFiatTopup`()
    
    fun `resolveFailedSwap`(`resolveFailedSwapInfo`: ResolveFailedSwapInfo): String
    
    fun `retrieveLatestFiatTopupInfo`(): FiatTopupInfo?
    
    fun `swapOnchainToLightning`(`satsPerVbyte`: UInt, `lspFeeParams`: OpeningFeeParams?): String
    
    fun `sweep`(`sweepInfo`: SweepInfo): String
    
    companion object
}
open class LightningNode : FFIObject, LightningNodeInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    constructor(`config`: Config, `eventsCallback`: EventsCallback) :
        this(
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_constructor_lightningnode_new(FfiConverterTypeConfig.lower(`config`),FfiConverterTypeEventsCallback.lower(`eventsCallback`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_free_lightningnode(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_clone_lightningnode(pointer!!, status)
        }
    }

    
    @Throws(LnException::class)override fun `acceptPocketTermsAndConditions`(`version`: Long) =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_accept_pocket_terms_and_conditions(it,
        FfiConverterLong.lower(`version`),
        _status)
}
        }
    
    
    override fun `background`() =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_background(it,
        
        _status)
}
        }
    
    
    
    @Throws(LnException::class)override fun `calculateLightningPayoutFee`(`offer`: OfferInfo): Amount =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_calculate_lightning_payout_fee(it,
        FfiConverterTypeOfferInfo.lower(`offer`),
        _status)
}
        }.let {
            FfiConverterTypeAmount.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `calculateLspFee`(`amountSat`: ULong): CalculateLspFeeResponse =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_calculate_lsp_fee(it,
        FfiConverterULong.lower(`amountSat`),
        _status)
}
        }.let {
            FfiConverterTypeCalculateLspFeeResponse.lift(it)
        }
    
    override fun `changeFiatCurrency`(`fiatCurrency`: String) =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_change_fiat_currency(it,
        FfiConverterString.lower(`fiatCurrency`),
        _status)
}
        }
    
    
    override fun `changeTimezoneConfig`(`timezoneConfig`: TzConfig) =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_change_timezone_config(it,
        FfiConverterTypeTzConfig.lower(`timezoneConfig`),
        _status)
}
        }
    
    
    
    @Throws(LnException::class)override fun `clearWallet`(`clearWalletInfo`: ClearWalletInfo, `destinationOnchainAddressData`: BitcoinAddressData) =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_clear_wallet(it,
        FfiConverterTypeClearWalletInfo.lower(`clearWalletInfo`),FfiConverterTypeBitcoinAddressData.lower(`destinationOnchainAddressData`),
        _status)
}
        }
    
    
    
    @Throws(LnException::class)override fun `createInvoice`(`amountSat`: ULong, `lspFeeParams`: OpeningFeeParams?, `description`: String, `metadata`: InvoiceCreationMetadata): InvoiceDetails =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_create_invoice(it,
        FfiConverterULong.lower(`amountSat`),FfiConverterOptionalTypeOpeningFeeParams.lower(`lspFeeParams`),FfiConverterString.lower(`description`),FfiConverterTypeInvoiceCreationMetadata.lower(`metadata`),
        _status)
}
        }.let {
            FfiConverterTypeInvoiceDetails.lift(it)
        }
    
    
    @Throws(DecodeDataException::class)override fun `decodeData`(`data`: String): DecodedData =
        callWithPointer {
    uniffiRustCallWithError(DecodeDataException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_decode_data(it,
        FfiConverterString.lower(`data`),
        _status)
}
        }.let {
            FfiConverterTypeDecodedData.lift(it)
        }
    
    override fun `foreground`() =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_foreground(it,
        
        _status)
}
        }
    
    
    
    @Throws(SwapException::class)override fun `generateSwapAddress`(`lspFeeParams`: OpeningFeeParams?): SwapAddressInfo =
        callWithPointer {
    uniffiRustCallWithError(SwapException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_generate_swap_address(it,
        FfiConverterOptionalTypeOpeningFeeParams.lower(`lspFeeParams`),
        _status)
}
        }.let {
            FfiConverterTypeSwapAddressInfo.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `getChannelCloseResolvingFees`(): ChannelCloseResolvingFees =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_channel_close_resolving_fees(it,
        
        _status)
}
        }.let {
            FfiConverterTypeChannelCloseResolvingFees.lift(it)
        }
    
    override fun `getExchangeRate`(): ExchangeRate? =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_exchange_rate(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypeExchangeRate.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `getHealthStatus`(): BreezHealthCheckStatus =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_health_status(it,
        
        _status)
}
        }.let {
            FfiConverterTypeBreezHealthCheckStatus.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `getInvoiceAffordability`(`amountSat`: ULong): InvoiceAffordability =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_invoice_affordability(it,
        FfiConverterULong.lower(`amountSat`),
        _status)
}
        }.let {
            FfiConverterTypeInvoiceAffordability.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `getLatestActivities`(`numberOfActivities`: UInt): ListActivitiesResponse =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_latest_activities(it,
        FfiConverterUInt.lower(`numberOfActivities`),
        _status)
}
        }.let {
            FfiConverterTypeListActivitiesResponse.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `getNodeInfo`(): NodeInfo =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_node_info(it,
        
        _status)
}
        }.let {
            FfiConverterTypeNodeInfo.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `getPayment`(`hash`: String): Payment =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_payment(it,
        FfiConverterString.lower(`hash`),
        _status)
}
        }.let {
            FfiConverterTypePayment.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `getPaymentAmountLimits`(): PaymentAmountLimits =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_payment_amount_limits(it,
        
        _status)
}
        }.let {
            FfiConverterTypePaymentAmountLimits.lift(it)
        }
    
    override fun `getPaymentMaxRoutingFeeMode`(`amountSat`: ULong): MaxRoutingFeeMode =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_payment_max_routing_fee_mode(it,
        FfiConverterULong.lower(`amountSat`),
        _status)
}
        }.let {
            FfiConverterTypeMaxRoutingFeeMode.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `getPaymentUuid`(`paymentHash`: String): String =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_payment_uuid(it,
        FfiConverterString.lower(`paymentHash`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `getTermsAndConditionsStatus`(`termsAndConditions`: TermsAndConditions): TermsAndConditionsStatus =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_terms_and_conditions_status(it,
        FfiConverterTypeTermsAndConditions.lower(`termsAndConditions`),
        _status)
}
        }.let {
            FfiConverterTypeTermsAndConditionsStatus.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `getUnresolvedFailedSwaps`(): List<FailedSwapInfo> =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_unresolved_failed_swaps(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeFailedSwapInfo.lift(it)
        }
    
    override fun `getWalletPubkeyId`(): String? =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_get_wallet_pubkey_id(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `hideTopup`(`id`: String) =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_hide_topup(it,
        FfiConverterString.lower(`id`),
        _status)
}
        }
    
    
    
    @Throws(LnException::class)override fun `isClearWalletFeasible`(): Boolean =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_is_clear_wallet_feasible(it,
        
        _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `listCurrencyCodes`(): List<String> =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_list_currency_codes(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceString.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `listLightningAddresses`(): List<String> =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_list_lightning_addresses(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceString.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `logDebugInfo`() =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_log_debug_info(it,
        
        _status)
}
        }
    
    
    
    @Throws(PayException::class)override fun `payInvoice`(`invoiceDetails`: InvoiceDetails, `metadata`: PaymentMetadata) =
        callWithPointer {
    uniffiRustCallWithError(PayException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_pay_invoice(it,
        FfiConverterTypeInvoiceDetails.lower(`invoiceDetails`),FfiConverterTypePaymentMetadata.lower(`metadata`),
        _status)
}
        }
    
    
    
    @Throws(LnUrlPayException::class)override fun `payLnurlp`(`lnurlPayRequestData`: LnUrlPayRequestData, `amountSat`: ULong): String =
        callWithPointer {
    uniffiRustCallWithError(LnUrlPayException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_pay_lnurlp(it,
        FfiConverterTypeLnUrlPayRequestData.lower(`lnurlPayRequestData`),FfiConverterULong.lower(`amountSat`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(PayException::class)override fun `payOpenInvoice`(`invoiceDetails`: InvoiceDetails, `amountSat`: ULong, `metadata`: PaymentMetadata) =
        callWithPointer {
    uniffiRustCallWithError(PayException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_pay_open_invoice(it,
        FfiConverterTypeInvoiceDetails.lower(`invoiceDetails`),FfiConverterULong.lower(`amountSat`),FfiConverterTypePaymentMetadata.lower(`metadata`),
        _status)
}
        }
    
    
    
    @Throws(LnException::class)override fun `prepareClearWallet`(): ClearWalletInfo =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_prepare_clear_wallet(it,
        
        _status)
}
        }.let {
            FfiConverterTypeClearWalletInfo.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `prepareResolveFailedSwap`(`failedSwapInfo`: FailedSwapInfo, `toAddress`: String, `onchainFeeRate`: UInt): ResolveFailedSwapInfo =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_prepare_resolve_failed_swap(it,
        FfiConverterTypeFailedSwapInfo.lower(`failedSwapInfo`),FfiConverterString.lower(`toAddress`),FfiConverterUInt.lower(`onchainFeeRate`),
        _status)
}
        }.let {
            FfiConverterTypeResolveFailedSwapInfo.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `prepareSweep`(`address`: String, `onchainFeeRate`: UInt): SweepInfo =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_prepare_sweep(it,
        FfiConverterString.lower(`address`),FfiConverterUInt.lower(`onchainFeeRate`),
        _status)
}
        }.let {
            FfiConverterTypeSweepInfo.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `queryLspFee`(): LspFee =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_query_lsp_fee(it,
        
        _status)
}
        }.let {
            FfiConverterTypeLspFee.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `queryOnchainFeeRate`(): UInt =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_query_onchain_fee_rate(it,
        
        _status)
}
        }.let {
            FfiConverterUInt.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `queryUncompletedOffers`(): List<OfferInfo> =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_query_uncompleted_offers(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeOfferInfo.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `registerFiatTopup`(`email`: String?, `userIban`: String, `userCurrency`: String): FiatTopupInfo =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_register_fiat_topup(it,
        FfiConverterOptionalString.lower(`email`),FfiConverterString.lower(`userIban`),FfiConverterString.lower(`userCurrency`),
        _status)
}
        }.let {
            FfiConverterTypeFiatTopupInfo.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `registerNotificationToken`(`notificationToken`: String, `languageIso6391`: String, `countryIso31661Alpha2`: String) =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_register_notification_token(it,
        FfiConverterString.lower(`notificationToken`),FfiConverterString.lower(`languageIso6391`),FfiConverterString.lower(`countryIso31661Alpha2`),
        _status)
}
        }
    
    
    
    @Throws(LnException::class)override fun `requestOfferCollection`(`offer`: OfferInfo): String =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_request_offer_collection(it,
        FfiConverterTypeOfferInfo.lower(`offer`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `resetFiatTopup`() =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_reset_fiat_topup(it,
        
        _status)
}
        }
    
    
    
    @Throws(LnException::class)override fun `resolveFailedSwap`(`resolveFailedSwapInfo`: ResolveFailedSwapInfo): String =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_resolve_failed_swap(it,
        FfiConverterTypeResolveFailedSwapInfo.lower(`resolveFailedSwapInfo`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `retrieveLatestFiatTopupInfo`(): FiatTopupInfo? =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_retrieve_latest_fiat_topup_info(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalTypeFiatTopupInfo.lift(it)
        }
    
    
    @Throws(SwapException::class)override fun `swapOnchainToLightning`(`satsPerVbyte`: UInt, `lspFeeParams`: OpeningFeeParams?): String =
        callWithPointer {
    uniffiRustCallWithError(SwapException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_swap_onchain_to_lightning(it,
        FfiConverterUInt.lower(`satsPerVbyte`),FfiConverterOptionalTypeOpeningFeeParams.lower(`lspFeeParams`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(LnException::class)override fun `sweep`(`sweepInfo`: SweepInfo): String =
        callWithPointer {
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_method_lightningnode_sweep(it,
        FfiConverterTypeSweepInfo.lower(`sweepInfo`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeLightningNode: FfiConverter<LightningNode, Pointer> {

    override fun lower(value: LightningNode): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): LightningNode {
        return LightningNode(value)
    }

    override fun read(buf: ByteBuffer): LightningNode {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: LightningNode) = 8

    override fun write(value: LightningNode, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class Amount (
    var `sats`: ULong, 
    var `fiat`: FiatValue?
) {
    
    companion object
}

public object FfiConverterTypeAmount: FfiConverterRustBuffer<Amount> {
    override fun read(buf: ByteBuffer): Amount {
        return Amount(
            FfiConverterULong.read(buf),
            FfiConverterOptionalTypeFiatValue.read(buf),
        )
    }

    override fun allocationSize(value: Amount) = (
            FfiConverterULong.allocationSize(value.`sats`) +
            FfiConverterOptionalTypeFiatValue.allocationSize(value.`fiat`)
    )

    override fun write(value: Amount, buf: ByteBuffer) {
            FfiConverterULong.write(value.`sats`, buf)
            FfiConverterOptionalTypeFiatValue.write(value.`fiat`, buf)
    }
}



data class BitcoinAddressData (
    var `address`: String, 
    var `network`: Network, 
    var `amountSat`: ULong?, 
    var `label`: String?, 
    var `message`: String?
) {
    
    companion object
}

public object FfiConverterTypeBitcoinAddressData: FfiConverterRustBuffer<BitcoinAddressData> {
    override fun read(buf: ByteBuffer): BitcoinAddressData {
        return BitcoinAddressData(
            FfiConverterString.read(buf),
            FfiConverterTypeNetwork.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: BitcoinAddressData) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterTypeNetwork.allocationSize(value.`network`) +
            FfiConverterOptionalULong.allocationSize(value.`amountSat`) +
            FfiConverterOptionalString.allocationSize(value.`label`) +
            FfiConverterOptionalString.allocationSize(value.`message`)
    )

    override fun write(value: BitcoinAddressData, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterTypeNetwork.write(value.`network`, buf)
            FfiConverterOptionalULong.write(value.`amountSat`, buf)
            FfiConverterOptionalString.write(value.`label`, buf)
            FfiConverterOptionalString.write(value.`message`, buf)
    }
}



data class CalculateLspFeeResponse (
    var `lspFee`: Amount, 
    var `lspFeeParams`: OpeningFeeParams?
) {
    
    companion object
}

public object FfiConverterTypeCalculateLspFeeResponse: FfiConverterRustBuffer<CalculateLspFeeResponse> {
    override fun read(buf: ByteBuffer): CalculateLspFeeResponse {
        return CalculateLspFeeResponse(
            FfiConverterTypeAmount.read(buf),
            FfiConverterOptionalTypeOpeningFeeParams.read(buf),
        )
    }

    override fun allocationSize(value: CalculateLspFeeResponse) = (
            FfiConverterTypeAmount.allocationSize(value.`lspFee`) +
            FfiConverterOptionalTypeOpeningFeeParams.allocationSize(value.`lspFeeParams`)
    )

    override fun write(value: CalculateLspFeeResponse, buf: ByteBuffer) {
            FfiConverterTypeAmount.write(value.`lspFee`, buf)
            FfiConverterOptionalTypeOpeningFeeParams.write(value.`lspFeeParams`, buf)
    }
}



data class ChannelClose (
    var `amount`: Amount, 
    var `state`: ChannelCloseState, 
    var `closedAt`: TzTime?, 
    var `closingTxId`: String
) {
    
    companion object
}

public object FfiConverterTypeChannelClose: FfiConverterRustBuffer<ChannelClose> {
    override fun read(buf: ByteBuffer): ChannelClose {
        return ChannelClose(
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeChannelCloseState.read(buf),
            FfiConverterOptionalTypeTzTime.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: ChannelClose) = (
            FfiConverterTypeAmount.allocationSize(value.`amount`) +
            FfiConverterTypeChannelCloseState.allocationSize(value.`state`) +
            FfiConverterOptionalTypeTzTime.allocationSize(value.`closedAt`) +
            FfiConverterString.allocationSize(value.`closingTxId`)
    )

    override fun write(value: ChannelClose, buf: ByteBuffer) {
            FfiConverterTypeAmount.write(value.`amount`, buf)
            FfiConverterTypeChannelCloseState.write(value.`state`, buf)
            FfiConverterOptionalTypeTzTime.write(value.`closedAt`, buf)
            FfiConverterString.write(value.`closingTxId`, buf)
    }
}



data class ChannelCloseResolvingFees (
    var `swapFees`: SwapToLightningFees?, 
    var `sweepOnchainFeeEstimate`: Amount, 
    var `satPerVbyte`: UInt
) {
    
    companion object
}

public object FfiConverterTypeChannelCloseResolvingFees: FfiConverterRustBuffer<ChannelCloseResolvingFees> {
    override fun read(buf: ByteBuffer): ChannelCloseResolvingFees {
        return ChannelCloseResolvingFees(
            FfiConverterOptionalTypeSwapToLightningFees.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: ChannelCloseResolvingFees) = (
            FfiConverterOptionalTypeSwapToLightningFees.allocationSize(value.`swapFees`) +
            FfiConverterTypeAmount.allocationSize(value.`sweepOnchainFeeEstimate`) +
            FfiConverterUInt.allocationSize(value.`satPerVbyte`)
    )

    override fun write(value: ChannelCloseResolvingFees, buf: ByteBuffer) {
            FfiConverterOptionalTypeSwapToLightningFees.write(value.`swapFees`, buf)
            FfiConverterTypeAmount.write(value.`sweepOnchainFeeEstimate`, buf)
            FfiConverterUInt.write(value.`satPerVbyte`, buf)
    }
}



data class ChannelsInfo (
    var `localBalance`: Amount, 
    var `inboundCapacity`: Amount, 
    var `outboundCapacity`: Amount
) {
    
    companion object
}

public object FfiConverterTypeChannelsInfo: FfiConverterRustBuffer<ChannelsInfo> {
    override fun read(buf: ByteBuffer): ChannelsInfo {
        return ChannelsInfo(
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
        )
    }

    override fun allocationSize(value: ChannelsInfo) = (
            FfiConverterTypeAmount.allocationSize(value.`localBalance`) +
            FfiConverterTypeAmount.allocationSize(value.`inboundCapacity`) +
            FfiConverterTypeAmount.allocationSize(value.`outboundCapacity`)
    )

    override fun write(value: ChannelsInfo, buf: ByteBuffer) {
            FfiConverterTypeAmount.write(value.`localBalance`, buf)
            FfiConverterTypeAmount.write(value.`inboundCapacity`, buf)
            FfiConverterTypeAmount.write(value.`outboundCapacity`, buf)
    }
}



data class ClearWalletInfo (
    var `clearAmount`: Amount, 
    var `totalEstimatedFees`: Amount, 
    var `onchainFee`: Amount, 
    var `swapFee`: Amount, 
    var `feesHash`: String
) {
    
    companion object
}

public object FfiConverterTypeClearWalletInfo: FfiConverterRustBuffer<ClearWalletInfo> {
    override fun read(buf: ByteBuffer): ClearWalletInfo {
        return ClearWalletInfo(
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: ClearWalletInfo) = (
            FfiConverterTypeAmount.allocationSize(value.`clearAmount`) +
            FfiConverterTypeAmount.allocationSize(value.`totalEstimatedFees`) +
            FfiConverterTypeAmount.allocationSize(value.`onchainFee`) +
            FfiConverterTypeAmount.allocationSize(value.`swapFee`) +
            FfiConverterString.allocationSize(value.`feesHash`)
    )

    override fun write(value: ClearWalletInfo, buf: ByteBuffer) {
            FfiConverterTypeAmount.write(value.`clearAmount`, buf)
            FfiConverterTypeAmount.write(value.`totalEstimatedFees`, buf)
            FfiConverterTypeAmount.write(value.`onchainFee`, buf)
            FfiConverterTypeAmount.write(value.`swapFee`, buf)
            FfiConverterString.write(value.`feesHash`, buf)
    }
}



data class Config (
    var `environment`: EnvironmentCode, 
    var `seed`: ByteArray, 
    var `fiatCurrency`: String, 
    var `localPersistencePath`: String, 
    var `timezoneConfig`: TzConfig, 
    var `enableFileLogging`: Boolean
) {
    
    companion object
}

public object FfiConverterTypeConfig: FfiConverterRustBuffer<Config> {
    override fun read(buf: ByteBuffer): Config {
        return Config(
            FfiConverterTypeEnvironmentCode.read(buf),
            FfiConverterByteArray.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeTzConfig.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Config) = (
            FfiConverterTypeEnvironmentCode.allocationSize(value.`environment`) +
            FfiConverterByteArray.allocationSize(value.`seed`) +
            FfiConverterString.allocationSize(value.`fiatCurrency`) +
            FfiConverterString.allocationSize(value.`localPersistencePath`) +
            FfiConverterTypeTzConfig.allocationSize(value.`timezoneConfig`) +
            FfiConverterBoolean.allocationSize(value.`enableFileLogging`)
    )

    override fun write(value: Config, buf: ByteBuffer) {
            FfiConverterTypeEnvironmentCode.write(value.`environment`, buf)
            FfiConverterByteArray.write(value.`seed`, buf)
            FfiConverterString.write(value.`fiatCurrency`, buf)
            FfiConverterString.write(value.`localPersistencePath`, buf)
            FfiConverterTypeTzConfig.write(value.`timezoneConfig`, buf)
            FfiConverterBoolean.write(value.`enableFileLogging`, buf)
    }
}



data class ExchangeRate (
    var `currencyCode`: String, 
    var `rate`: UInt, 
    var `updatedAt`: java.time.Instant
) {
    
    companion object
}

public object FfiConverterTypeExchangeRate: FfiConverterRustBuffer<ExchangeRate> {
    override fun read(buf: ByteBuffer): ExchangeRate {
        return ExchangeRate(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterTimestamp.read(buf),
        )
    }

    override fun allocationSize(value: ExchangeRate) = (
            FfiConverterString.allocationSize(value.`currencyCode`) +
            FfiConverterUInt.allocationSize(value.`rate`) +
            FfiConverterTimestamp.allocationSize(value.`updatedAt`)
    )

    override fun write(value: ExchangeRate, buf: ByteBuffer) {
            FfiConverterString.write(value.`currencyCode`, buf)
            FfiConverterUInt.write(value.`rate`, buf)
            FfiConverterTimestamp.write(value.`updatedAt`, buf)
    }
}



data class FailedSwapInfo (
    var `address`: String, 
    var `amount`: Amount, 
    var `createdAt`: java.time.Instant
) {
    
    companion object
}

public object FfiConverterTypeFailedSwapInfo: FfiConverterRustBuffer<FailedSwapInfo> {
    override fun read(buf: ByteBuffer): FailedSwapInfo {
        return FailedSwapInfo(
            FfiConverterString.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTimestamp.read(buf),
        )
    }

    override fun allocationSize(value: FailedSwapInfo) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterTypeAmount.allocationSize(value.`amount`) +
            FfiConverterTimestamp.allocationSize(value.`createdAt`)
    )

    override fun write(value: FailedSwapInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterTypeAmount.write(value.`amount`, buf)
            FfiConverterTimestamp.write(value.`createdAt`, buf)
    }
}



data class FiatTopupInfo (
    var `orderId`: String, 
    var `debitorIban`: String, 
    var `creditorReference`: String, 
    var `creditorIban`: String, 
    var `creditorBankName`: String, 
    var `creditorBankStreet`: String, 
    var `creditorBankPostalCode`: String, 
    var `creditorBankTown`: String, 
    var `creditorBankCountry`: String, 
    var `creditorBankBic`: String, 
    var `creditorName`: String, 
    var `creditorStreet`: String, 
    var `creditorPostalCode`: String, 
    var `creditorTown`: String, 
    var `creditorCountry`: String, 
    var `currency`: String
) {
    
    companion object
}

public object FfiConverterTypeFiatTopupInfo: FfiConverterRustBuffer<FiatTopupInfo> {
    override fun read(buf: ByteBuffer): FiatTopupInfo {
        return FiatTopupInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: FiatTopupInfo) = (
            FfiConverterString.allocationSize(value.`orderId`) +
            FfiConverterString.allocationSize(value.`debitorIban`) +
            FfiConverterString.allocationSize(value.`creditorReference`) +
            FfiConverterString.allocationSize(value.`creditorIban`) +
            FfiConverterString.allocationSize(value.`creditorBankName`) +
            FfiConverterString.allocationSize(value.`creditorBankStreet`) +
            FfiConverterString.allocationSize(value.`creditorBankPostalCode`) +
            FfiConverterString.allocationSize(value.`creditorBankTown`) +
            FfiConverterString.allocationSize(value.`creditorBankCountry`) +
            FfiConverterString.allocationSize(value.`creditorBankBic`) +
            FfiConverterString.allocationSize(value.`creditorName`) +
            FfiConverterString.allocationSize(value.`creditorStreet`) +
            FfiConverterString.allocationSize(value.`creditorPostalCode`) +
            FfiConverterString.allocationSize(value.`creditorTown`) +
            FfiConverterString.allocationSize(value.`creditorCountry`) +
            FfiConverterString.allocationSize(value.`currency`)
    )

    override fun write(value: FiatTopupInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`orderId`, buf)
            FfiConverterString.write(value.`debitorIban`, buf)
            FfiConverterString.write(value.`creditorReference`, buf)
            FfiConverterString.write(value.`creditorIban`, buf)
            FfiConverterString.write(value.`creditorBankName`, buf)
            FfiConverterString.write(value.`creditorBankStreet`, buf)
            FfiConverterString.write(value.`creditorBankPostalCode`, buf)
            FfiConverterString.write(value.`creditorBankTown`, buf)
            FfiConverterString.write(value.`creditorBankCountry`, buf)
            FfiConverterString.write(value.`creditorBankBic`, buf)
            FfiConverterString.write(value.`creditorName`, buf)
            FfiConverterString.write(value.`creditorStreet`, buf)
            FfiConverterString.write(value.`creditorPostalCode`, buf)
            FfiConverterString.write(value.`creditorTown`, buf)
            FfiConverterString.write(value.`creditorCountry`, buf)
            FfiConverterString.write(value.`currency`, buf)
    }
}



data class FiatValue (
    var `minorUnits`: ULong, 
    var `currencyCode`: String, 
    var `rate`: UInt, 
    var `convertedAt`: java.time.Instant
) {
    
    companion object
}

public object FfiConverterTypeFiatValue: FfiConverterRustBuffer<FiatValue> {
    override fun read(buf: ByteBuffer): FiatValue {
        return FiatValue(
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterTimestamp.read(buf),
        )
    }

    override fun allocationSize(value: FiatValue) = (
            FfiConverterULong.allocationSize(value.`minorUnits`) +
            FfiConverterString.allocationSize(value.`currencyCode`) +
            FfiConverterUInt.allocationSize(value.`rate`) +
            FfiConverterTimestamp.allocationSize(value.`convertedAt`)
    )

    override fun write(value: FiatValue, buf: ByteBuffer) {
            FfiConverterULong.write(value.`minorUnits`, buf)
            FfiConverterString.write(value.`currencyCode`, buf)
            FfiConverterUInt.write(value.`rate`, buf)
            FfiConverterTimestamp.write(value.`convertedAt`, buf)
    }
}



data class InvoiceCreationMetadata (
    var `requestCurrency`: String
) {
    
    companion object
}

public object FfiConverterTypeInvoiceCreationMetadata: FfiConverterRustBuffer<InvoiceCreationMetadata> {
    override fun read(buf: ByteBuffer): InvoiceCreationMetadata {
        return InvoiceCreationMetadata(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: InvoiceCreationMetadata) = (
            FfiConverterString.allocationSize(value.`requestCurrency`)
    )

    override fun write(value: InvoiceCreationMetadata, buf: ByteBuffer) {
            FfiConverterString.write(value.`requestCurrency`, buf)
    }
}



data class InvoiceDetails (
    var `invoice`: String, 
    var `amount`: Amount?, 
    var `description`: String, 
    var `paymentHash`: String, 
    var `payeePubKey`: String, 
    var `creationTimestamp`: java.time.Instant, 
    var `expiryInterval`: java.time.Duration, 
    var `expiryTimestamp`: java.time.Instant
) {
    
    companion object
}

public object FfiConverterTypeInvoiceDetails: FfiConverterRustBuffer<InvoiceDetails> {
    override fun read(buf: ByteBuffer): InvoiceDetails {
        return InvoiceDetails(
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeAmount.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTimestamp.read(buf),
            FfiConverterDuration.read(buf),
            FfiConverterTimestamp.read(buf),
        )
    }

    override fun allocationSize(value: InvoiceDetails) = (
            FfiConverterString.allocationSize(value.`invoice`) +
            FfiConverterOptionalTypeAmount.allocationSize(value.`amount`) +
            FfiConverterString.allocationSize(value.`description`) +
            FfiConverterString.allocationSize(value.`paymentHash`) +
            FfiConverterString.allocationSize(value.`payeePubKey`) +
            FfiConverterTimestamp.allocationSize(value.`creationTimestamp`) +
            FfiConverterDuration.allocationSize(value.`expiryInterval`) +
            FfiConverterTimestamp.allocationSize(value.`expiryTimestamp`)
    )

    override fun write(value: InvoiceDetails, buf: ByteBuffer) {
            FfiConverterString.write(value.`invoice`, buf)
            FfiConverterOptionalTypeAmount.write(value.`amount`, buf)
            FfiConverterString.write(value.`description`, buf)
            FfiConverterString.write(value.`paymentHash`, buf)
            FfiConverterString.write(value.`payeePubKey`, buf)
            FfiConverterTimestamp.write(value.`creationTimestamp`, buf)
            FfiConverterDuration.write(value.`expiryInterval`, buf)
            FfiConverterTimestamp.write(value.`expiryTimestamp`, buf)
    }
}



data class ListActivitiesResponse (
    var `pendingActivities`: List<Activity>, 
    var `completedActivities`: List<Activity>
) {
    
    companion object
}

public object FfiConverterTypeListActivitiesResponse: FfiConverterRustBuffer<ListActivitiesResponse> {
    override fun read(buf: ByteBuffer): ListActivitiesResponse {
        return ListActivitiesResponse(
            FfiConverterSequenceTypeActivity.read(buf),
            FfiConverterSequenceTypeActivity.read(buf),
        )
    }

    override fun allocationSize(value: ListActivitiesResponse) = (
            FfiConverterSequenceTypeActivity.allocationSize(value.`pendingActivities`) +
            FfiConverterSequenceTypeActivity.allocationSize(value.`completedActivities`)
    )

    override fun write(value: ListActivitiesResponse, buf: ByteBuffer) {
            FfiConverterSequenceTypeActivity.write(value.`pendingActivities`, buf)
            FfiConverterSequenceTypeActivity.write(value.`completedActivities`, buf)
    }
}



data class LnUrlPayDetails (
    var `domain`: String, 
    var `shortDescription`: String, 
    var `longDescription`: String?, 
    var `minSendable`: Amount, 
    var `maxSendable`: Amount, 
    var `requestData`: LnUrlPayRequestData
) {
    
    companion object
}

public object FfiConverterTypeLnUrlPayDetails: FfiConverterRustBuffer<LnUrlPayDetails> {
    override fun read(buf: ByteBuffer): LnUrlPayDetails {
        return LnUrlPayDetails(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeLnUrlPayRequestData.read(buf),
        )
    }

    override fun allocationSize(value: LnUrlPayDetails) = (
            FfiConverterString.allocationSize(value.`domain`) +
            FfiConverterString.allocationSize(value.`shortDescription`) +
            FfiConverterOptionalString.allocationSize(value.`longDescription`) +
            FfiConverterTypeAmount.allocationSize(value.`minSendable`) +
            FfiConverterTypeAmount.allocationSize(value.`maxSendable`) +
            FfiConverterTypeLnUrlPayRequestData.allocationSize(value.`requestData`)
    )

    override fun write(value: LnUrlPayDetails, buf: ByteBuffer) {
            FfiConverterString.write(value.`domain`, buf)
            FfiConverterString.write(value.`shortDescription`, buf)
            FfiConverterOptionalString.write(value.`longDescription`, buf)
            FfiConverterTypeAmount.write(value.`minSendable`, buf)
            FfiConverterTypeAmount.write(value.`maxSendable`, buf)
            FfiConverterTypeLnUrlPayRequestData.write(value.`requestData`, buf)
    }
}



data class LnUrlPayRequestData (
    var `callback`: String, 
    var `minSendable`: ULong, 
    var `maxSendable`: ULong, 
    var `metadataStr`: String, 
    var `commentAllowed`: UShort, 
    var `domain`: String, 
    var `lnAddress`: String?
) {
    
    companion object
}

public object FfiConverterTypeLnUrlPayRequestData: FfiConverterRustBuffer<LnUrlPayRequestData> {
    override fun read(buf: ByteBuffer): LnUrlPayRequestData {
        return LnUrlPayRequestData(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: LnUrlPayRequestData) = (
            FfiConverterString.allocationSize(value.`callback`) +
            FfiConverterULong.allocationSize(value.`minSendable`) +
            FfiConverterULong.allocationSize(value.`maxSendable`) +
            FfiConverterString.allocationSize(value.`metadataStr`) +
            FfiConverterUShort.allocationSize(value.`commentAllowed`) +
            FfiConverterString.allocationSize(value.`domain`) +
            FfiConverterOptionalString.allocationSize(value.`lnAddress`)
    )

    override fun write(value: LnUrlPayRequestData, buf: ByteBuffer) {
            FfiConverterString.write(value.`callback`, buf)
            FfiConverterULong.write(value.`minSendable`, buf)
            FfiConverterULong.write(value.`maxSendable`, buf)
            FfiConverterString.write(value.`metadataStr`, buf)
            FfiConverterUShort.write(value.`commentAllowed`, buf)
            FfiConverterString.write(value.`domain`, buf)
            FfiConverterOptionalString.write(value.`lnAddress`, buf)
    }
}



data class LnUrlWithdrawDetails (
    var `minWithdrawable`: Amount, 
    var `maxWithdrawable`: Amount, 
    var `requestData`: LnUrlWithdrawRequestData
) {
    
    companion object
}

public object FfiConverterTypeLnUrlWithdrawDetails: FfiConverterRustBuffer<LnUrlWithdrawDetails> {
    override fun read(buf: ByteBuffer): LnUrlWithdrawDetails {
        return LnUrlWithdrawDetails(
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeLnUrlWithdrawRequestData.read(buf),
        )
    }

    override fun allocationSize(value: LnUrlWithdrawDetails) = (
            FfiConverterTypeAmount.allocationSize(value.`minWithdrawable`) +
            FfiConverterTypeAmount.allocationSize(value.`maxWithdrawable`) +
            FfiConverterTypeLnUrlWithdrawRequestData.allocationSize(value.`requestData`)
    )

    override fun write(value: LnUrlWithdrawDetails, buf: ByteBuffer) {
            FfiConverterTypeAmount.write(value.`minWithdrawable`, buf)
            FfiConverterTypeAmount.write(value.`maxWithdrawable`, buf)
            FfiConverterTypeLnUrlWithdrawRequestData.write(value.`requestData`, buf)
    }
}



data class LnUrlWithdrawRequestData (
    var `callback`: String, 
    var `k1`: String, 
    var `defaultDescription`: String, 
    var `minWithdrawable`: ULong, 
    var `maxWithdrawable`: ULong
) {
    
    companion object
}

public object FfiConverterTypeLnUrlWithdrawRequestData: FfiConverterRustBuffer<LnUrlWithdrawRequestData> {
    override fun read(buf: ByteBuffer): LnUrlWithdrawRequestData {
        return LnUrlWithdrawRequestData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: LnUrlWithdrawRequestData) = (
            FfiConverterString.allocationSize(value.`callback`) +
            FfiConverterString.allocationSize(value.`k1`) +
            FfiConverterString.allocationSize(value.`defaultDescription`) +
            FfiConverterULong.allocationSize(value.`minWithdrawable`) +
            FfiConverterULong.allocationSize(value.`maxWithdrawable`)
    )

    override fun write(value: LnUrlWithdrawRequestData, buf: ByteBuffer) {
            FfiConverterString.write(value.`callback`, buf)
            FfiConverterString.write(value.`k1`, buf)
            FfiConverterString.write(value.`defaultDescription`, buf)
            FfiConverterULong.write(value.`minWithdrawable`, buf)
            FfiConverterULong.write(value.`maxWithdrawable`, buf)
    }
}



data class LspFee (
    var `channelMinimumFee`: Amount, 
    var `channelFeePermyriad`: ULong
) {
    
    companion object
}

public object FfiConverterTypeLspFee: FfiConverterRustBuffer<LspFee> {
    override fun read(buf: ByteBuffer): LspFee {
        return LspFee(
            FfiConverterTypeAmount.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: LspFee) = (
            FfiConverterTypeAmount.allocationSize(value.`channelMinimumFee`) +
            FfiConverterULong.allocationSize(value.`channelFeePermyriad`)
    )

    override fun write(value: LspFee, buf: ByteBuffer) {
            FfiConverterTypeAmount.write(value.`channelMinimumFee`, buf)
            FfiConverterULong.write(value.`channelFeePermyriad`, buf)
    }
}



data class NodeInfo (
    var `nodePubkey`: String, 
    var `peers`: List<String>, 
    var `onchainBalance`: Amount, 
    var `channelsInfo`: ChannelsInfo
) {
    
    companion object
}

public object FfiConverterTypeNodeInfo: FfiConverterRustBuffer<NodeInfo> {
    override fun read(buf: ByteBuffer): NodeInfo {
        return NodeInfo(
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeChannelsInfo.read(buf),
        )
    }

    override fun allocationSize(value: NodeInfo) = (
            FfiConverterString.allocationSize(value.`nodePubkey`) +
            FfiConverterSequenceString.allocationSize(value.`peers`) +
            FfiConverterTypeAmount.allocationSize(value.`onchainBalance`) +
            FfiConverterTypeChannelsInfo.allocationSize(value.`channelsInfo`)
    )

    override fun write(value: NodeInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`nodePubkey`, buf)
            FfiConverterSequenceString.write(value.`peers`, buf)
            FfiConverterTypeAmount.write(value.`onchainBalance`, buf)
            FfiConverterTypeChannelsInfo.write(value.`channelsInfo`, buf)
    }
}



data class OfferInfo (
    var `offerKind`: OfferKind, 
    var `amount`: Amount, 
    var `lnurlw`: String?, 
    var `createdAt`: java.time.Instant, 
    var `expiresAt`: java.time.Instant?, 
    var `status`: OfferStatus
) {
    
    companion object
}

public object FfiConverterTypeOfferInfo: FfiConverterRustBuffer<OfferInfo> {
    override fun read(buf: ByteBuffer): OfferInfo {
        return OfferInfo(
            FfiConverterTypeOfferKind.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTimestamp.read(buf),
            FfiConverterOptionalTimestamp.read(buf),
            FfiConverterTypeOfferStatus.read(buf),
        )
    }

    override fun allocationSize(value: OfferInfo) = (
            FfiConverterTypeOfferKind.allocationSize(value.`offerKind`) +
            FfiConverterTypeAmount.allocationSize(value.`amount`) +
            FfiConverterOptionalString.allocationSize(value.`lnurlw`) +
            FfiConverterTimestamp.allocationSize(value.`createdAt`) +
            FfiConverterOptionalTimestamp.allocationSize(value.`expiresAt`) +
            FfiConverterTypeOfferStatus.allocationSize(value.`status`)
    )

    override fun write(value: OfferInfo, buf: ByteBuffer) {
            FfiConverterTypeOfferKind.write(value.`offerKind`, buf)
            FfiConverterTypeAmount.write(value.`amount`, buf)
            FfiConverterOptionalString.write(value.`lnurlw`, buf)
            FfiConverterTimestamp.write(value.`createdAt`, buf)
            FfiConverterOptionalTimestamp.write(value.`expiresAt`, buf)
            FfiConverterTypeOfferStatus.write(value.`status`, buf)
    }
}



data class OpeningFeeParams (
    var `minMsat`: ULong, 
    var `proportional`: UInt, 
    var `validUntil`: String, 
    var `maxIdleTime`: UInt, 
    var `maxClientToSelfDelay`: UInt, 
    var `promise`: String
) {
    
    companion object
}

public object FfiConverterTypeOpeningFeeParams: FfiConverterRustBuffer<OpeningFeeParams> {
    override fun read(buf: ByteBuffer): OpeningFeeParams {
        return OpeningFeeParams(
            FfiConverterULong.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: OpeningFeeParams) = (
            FfiConverterULong.allocationSize(value.`minMsat`) +
            FfiConverterUInt.allocationSize(value.`proportional`) +
            FfiConverterString.allocationSize(value.`validUntil`) +
            FfiConverterUInt.allocationSize(value.`maxIdleTime`) +
            FfiConverterUInt.allocationSize(value.`maxClientToSelfDelay`) +
            FfiConverterString.allocationSize(value.`promise`)
    )

    override fun write(value: OpeningFeeParams, buf: ByteBuffer) {
            FfiConverterULong.write(value.`minMsat`, buf)
            FfiConverterUInt.write(value.`proportional`, buf)
            FfiConverterString.write(value.`validUntil`, buf)
            FfiConverterUInt.write(value.`maxIdleTime`, buf)
            FfiConverterUInt.write(value.`maxClientToSelfDelay`, buf)
            FfiConverterString.write(value.`promise`, buf)
    }
}



data class Payment (
    var `paymentType`: PaymentType, 
    var `paymentState`: PaymentState, 
    var `failReason`: PayErrorCode?, 
    var `hash`: String, 
    var `amount`: Amount, 
    var `requestedAmount`: Amount, 
    var `invoiceDetails`: InvoiceDetails, 
    var `createdAt`: TzTime, 
    var `description`: String, 
    var `preimage`: String?, 
    var `networkFees`: Amount?, 
    var `lspFees`: Amount?, 
    var `offer`: OfferKind?, 
    var `swap`: SwapInfo?, 
    var `recipient`: Recipient?
) {
    
    companion object
}

public object FfiConverterTypePayment: FfiConverterRustBuffer<Payment> {
    override fun read(buf: ByteBuffer): Payment {
        return Payment(
            FfiConverterTypePaymentType.read(buf),
            FfiConverterTypePaymentState.read(buf),
            FfiConverterOptionalTypePayErrorCode.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeInvoiceDetails.read(buf),
            FfiConverterTypeTzTime.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalTypeAmount.read(buf),
            FfiConverterOptionalTypeAmount.read(buf),
            FfiConverterOptionalTypeOfferKind.read(buf),
            FfiConverterOptionalTypeSwapInfo.read(buf),
            FfiConverterOptionalTypeRecipient.read(buf),
        )
    }

    override fun allocationSize(value: Payment) = (
            FfiConverterTypePaymentType.allocationSize(value.`paymentType`) +
            FfiConverterTypePaymentState.allocationSize(value.`paymentState`) +
            FfiConverterOptionalTypePayErrorCode.allocationSize(value.`failReason`) +
            FfiConverterString.allocationSize(value.`hash`) +
            FfiConverterTypeAmount.allocationSize(value.`amount`) +
            FfiConverterTypeAmount.allocationSize(value.`requestedAmount`) +
            FfiConverterTypeInvoiceDetails.allocationSize(value.`invoiceDetails`) +
            FfiConverterTypeTzTime.allocationSize(value.`createdAt`) +
            FfiConverterString.allocationSize(value.`description`) +
            FfiConverterOptionalString.allocationSize(value.`preimage`) +
            FfiConverterOptionalTypeAmount.allocationSize(value.`networkFees`) +
            FfiConverterOptionalTypeAmount.allocationSize(value.`lspFees`) +
            FfiConverterOptionalTypeOfferKind.allocationSize(value.`offer`) +
            FfiConverterOptionalTypeSwapInfo.allocationSize(value.`swap`) +
            FfiConverterOptionalTypeRecipient.allocationSize(value.`recipient`)
    )

    override fun write(value: Payment, buf: ByteBuffer) {
            FfiConverterTypePaymentType.write(value.`paymentType`, buf)
            FfiConverterTypePaymentState.write(value.`paymentState`, buf)
            FfiConverterOptionalTypePayErrorCode.write(value.`failReason`, buf)
            FfiConverterString.write(value.`hash`, buf)
            FfiConverterTypeAmount.write(value.`amount`, buf)
            FfiConverterTypeAmount.write(value.`requestedAmount`, buf)
            FfiConverterTypeInvoiceDetails.write(value.`invoiceDetails`, buf)
            FfiConverterTypeTzTime.write(value.`createdAt`, buf)
            FfiConverterString.write(value.`description`, buf)
            FfiConverterOptionalString.write(value.`preimage`, buf)
            FfiConverterOptionalTypeAmount.write(value.`networkFees`, buf)
            FfiConverterOptionalTypeAmount.write(value.`lspFees`, buf)
            FfiConverterOptionalTypeOfferKind.write(value.`offer`, buf)
            FfiConverterOptionalTypeSwapInfo.write(value.`swap`, buf)
            FfiConverterOptionalTypeRecipient.write(value.`recipient`, buf)
    }
}



data class PaymentAmountLimits (
    var `maxReceive`: Amount, 
    var `liquidityLimit`: LiquidityLimit
) {
    
    companion object
}

public object FfiConverterTypePaymentAmountLimits: FfiConverterRustBuffer<PaymentAmountLimits> {
    override fun read(buf: ByteBuffer): PaymentAmountLimits {
        return PaymentAmountLimits(
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeLiquidityLimit.read(buf),
        )
    }

    override fun allocationSize(value: PaymentAmountLimits) = (
            FfiConverterTypeAmount.allocationSize(value.`maxReceive`) +
            FfiConverterTypeLiquidityLimit.allocationSize(value.`liquidityLimit`)
    )

    override fun write(value: PaymentAmountLimits, buf: ByteBuffer) {
            FfiConverterTypeAmount.write(value.`maxReceive`, buf)
            FfiConverterTypeLiquidityLimit.write(value.`liquidityLimit`, buf)
    }
}



data class PaymentMetadata (
    var `source`: PaymentSource, 
    var `processStartedAt`: java.time.Instant
) {
    
    companion object
}

public object FfiConverterTypePaymentMetadata: FfiConverterRustBuffer<PaymentMetadata> {
    override fun read(buf: ByteBuffer): PaymentMetadata {
        return PaymentMetadata(
            FfiConverterTypePaymentSource.read(buf),
            FfiConverterTimestamp.read(buf),
        )
    }

    override fun allocationSize(value: PaymentMetadata) = (
            FfiConverterTypePaymentSource.allocationSize(value.`source`) +
            FfiConverterTimestamp.allocationSize(value.`processStartedAt`)
    )

    override fun write(value: PaymentMetadata, buf: ByteBuffer) {
            FfiConverterTypePaymentSource.write(value.`source`, buf)
            FfiConverterTimestamp.write(value.`processStartedAt`, buf)
    }
}



data class ResolveFailedSwapInfo (
    var `swapAddress`: String, 
    var `recoveredAmount`: Amount, 
    var `onchainFee`: Amount, 
    var `toAddress`: String, 
    var `onchainFeeRate`: UInt
) {
    
    companion object
}

public object FfiConverterTypeResolveFailedSwapInfo: FfiConverterRustBuffer<ResolveFailedSwapInfo> {
    override fun read(buf: ByteBuffer): ResolveFailedSwapInfo {
        return ResolveFailedSwapInfo(
            FfiConverterString.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: ResolveFailedSwapInfo) = (
            FfiConverterString.allocationSize(value.`swapAddress`) +
            FfiConverterTypeAmount.allocationSize(value.`recoveredAmount`) +
            FfiConverterTypeAmount.allocationSize(value.`onchainFee`) +
            FfiConverterString.allocationSize(value.`toAddress`) +
            FfiConverterUInt.allocationSize(value.`onchainFeeRate`)
    )

    override fun write(value: ResolveFailedSwapInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`swapAddress`, buf)
            FfiConverterTypeAmount.write(value.`recoveredAmount`, buf)
            FfiConverterTypeAmount.write(value.`onchainFee`, buf)
            FfiConverterString.write(value.`toAddress`, buf)
            FfiConverterUInt.write(value.`onchainFeeRate`, buf)
    }
}



data class Secret (
    var `mnemonic`: List<String>, 
    var `passphrase`: String, 
    var `seed`: ByteArray
) {
    
    companion object
}

public object FfiConverterTypeSecret: FfiConverterRustBuffer<Secret> {
    override fun read(buf: ByteBuffer): Secret {
        return Secret(
            FfiConverterSequenceString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterByteArray.read(buf),
        )
    }

    override fun allocationSize(value: Secret) = (
            FfiConverterSequenceString.allocationSize(value.`mnemonic`) +
            FfiConverterString.allocationSize(value.`passphrase`) +
            FfiConverterByteArray.allocationSize(value.`seed`)
    )

    override fun write(value: Secret, buf: ByteBuffer) {
            FfiConverterSequenceString.write(value.`mnemonic`, buf)
            FfiConverterString.write(value.`passphrase`, buf)
            FfiConverterByteArray.write(value.`seed`, buf)
    }
}



data class SwapAddressInfo (
    var `address`: String, 
    var `minDeposit`: Amount, 
    var `maxDeposit`: Amount, 
    var `swapFee`: Amount
) {
    
    companion object
}

public object FfiConverterTypeSwapAddressInfo: FfiConverterRustBuffer<SwapAddressInfo> {
    override fun read(buf: ByteBuffer): SwapAddressInfo {
        return SwapAddressInfo(
            FfiConverterString.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
        )
    }

    override fun allocationSize(value: SwapAddressInfo) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterTypeAmount.allocationSize(value.`minDeposit`) +
            FfiConverterTypeAmount.allocationSize(value.`maxDeposit`) +
            FfiConverterTypeAmount.allocationSize(value.`swapFee`)
    )

    override fun write(value: SwapAddressInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterTypeAmount.write(value.`minDeposit`, buf)
            FfiConverterTypeAmount.write(value.`maxDeposit`, buf)
            FfiConverterTypeAmount.write(value.`swapFee`, buf)
    }
}



data class SwapInfo (
    var `bitcoinAddress`: String, 
    var `createdAt`: TzTime, 
    var `paidMsats`: ULong
) {
    
    companion object
}

public object FfiConverterTypeSwapInfo: FfiConverterRustBuffer<SwapInfo> {
    override fun read(buf: ByteBuffer): SwapInfo {
        return SwapInfo(
            FfiConverterString.read(buf),
            FfiConverterTypeTzTime.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: SwapInfo) = (
            FfiConverterString.allocationSize(value.`bitcoinAddress`) +
            FfiConverterTypeTzTime.allocationSize(value.`createdAt`) +
            FfiConverterULong.allocationSize(value.`paidMsats`)
    )

    override fun write(value: SwapInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`bitcoinAddress`, buf)
            FfiConverterTypeTzTime.write(value.`createdAt`, buf)
            FfiConverterULong.write(value.`paidMsats`, buf)
    }
}



data class SwapToLightningFees (
    var `swapFee`: Amount, 
    var `onchainFee`: Amount, 
    var `channelOpeningFee`: Amount, 
    var `totalFees`: Amount, 
    var `lspFeeParams`: OpeningFeeParams?
) {
    
    companion object
}

public object FfiConverterTypeSwapToLightningFees: FfiConverterRustBuffer<SwapToLightningFees> {
    override fun read(buf: ByteBuffer): SwapToLightningFees {
        return SwapToLightningFees(
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterOptionalTypeOpeningFeeParams.read(buf),
        )
    }

    override fun allocationSize(value: SwapToLightningFees) = (
            FfiConverterTypeAmount.allocationSize(value.`swapFee`) +
            FfiConverterTypeAmount.allocationSize(value.`onchainFee`) +
            FfiConverterTypeAmount.allocationSize(value.`channelOpeningFee`) +
            FfiConverterTypeAmount.allocationSize(value.`totalFees`) +
            FfiConverterOptionalTypeOpeningFeeParams.allocationSize(value.`lspFeeParams`)
    )

    override fun write(value: SwapToLightningFees, buf: ByteBuffer) {
            FfiConverterTypeAmount.write(value.`swapFee`, buf)
            FfiConverterTypeAmount.write(value.`onchainFee`, buf)
            FfiConverterTypeAmount.write(value.`channelOpeningFee`, buf)
            FfiConverterTypeAmount.write(value.`totalFees`, buf)
            FfiConverterOptionalTypeOpeningFeeParams.write(value.`lspFeeParams`, buf)
    }
}



data class SweepInfo (
    var `address`: String, 
    var `onchainFeeRate`: UInt, 
    var `onchainFeeSat`: Amount, 
    var `amount`: Amount
) {
    
    companion object
}

public object FfiConverterTypeSweepInfo: FfiConverterRustBuffer<SweepInfo> {
    override fun read(buf: ByteBuffer): SweepInfo {
        return SweepInfo(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterTypeAmount.read(buf),
            FfiConverterTypeAmount.read(buf),
        )
    }

    override fun allocationSize(value: SweepInfo) = (
            FfiConverterString.allocationSize(value.`address`) +
            FfiConverterUInt.allocationSize(value.`onchainFeeRate`) +
            FfiConverterTypeAmount.allocationSize(value.`onchainFeeSat`) +
            FfiConverterTypeAmount.allocationSize(value.`amount`)
    )

    override fun write(value: SweepInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`address`, buf)
            FfiConverterUInt.write(value.`onchainFeeRate`, buf)
            FfiConverterTypeAmount.write(value.`onchainFeeSat`, buf)
            FfiConverterTypeAmount.write(value.`amount`, buf)
    }
}



data class TermsAndConditionsStatus (
    var `acceptedAt`: java.time.Instant?, 
    var `termsAndConditions`: TermsAndConditions, 
    var `version`: Long
) {
    
    companion object
}

public object FfiConverterTypeTermsAndConditionsStatus: FfiConverterRustBuffer<TermsAndConditionsStatus> {
    override fun read(buf: ByteBuffer): TermsAndConditionsStatus {
        return TermsAndConditionsStatus(
            FfiConverterOptionalTimestamp.read(buf),
            FfiConverterTypeTermsAndConditions.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: TermsAndConditionsStatus) = (
            FfiConverterOptionalTimestamp.allocationSize(value.`acceptedAt`) +
            FfiConverterTypeTermsAndConditions.allocationSize(value.`termsAndConditions`) +
            FfiConverterLong.allocationSize(value.`version`)
    )

    override fun write(value: TermsAndConditionsStatus, buf: ByteBuffer) {
            FfiConverterOptionalTimestamp.write(value.`acceptedAt`, buf)
            FfiConverterTypeTermsAndConditions.write(value.`termsAndConditions`, buf)
            FfiConverterLong.write(value.`version`, buf)
    }
}



data class TzConfig (
    var `timezoneId`: String, 
    var `timezoneUtcOffsetSecs`: Int
) {
    
    companion object
}

public object FfiConverterTypeTzConfig: FfiConverterRustBuffer<TzConfig> {
    override fun read(buf: ByteBuffer): TzConfig {
        return TzConfig(
            FfiConverterString.read(buf),
            FfiConverterInt.read(buf),
        )
    }

    override fun allocationSize(value: TzConfig) = (
            FfiConverterString.allocationSize(value.`timezoneId`) +
            FfiConverterInt.allocationSize(value.`timezoneUtcOffsetSecs`)
    )

    override fun write(value: TzConfig, buf: ByteBuffer) {
            FfiConverterString.write(value.`timezoneId`, buf)
            FfiConverterInt.write(value.`timezoneUtcOffsetSecs`, buf)
    }
}



data class TzTime (
    var `time`: java.time.Instant, 
    var `timezoneId`: String, 
    var `timezoneUtcOffsetSecs`: Int
) {
    
    companion object
}

public object FfiConverterTypeTzTime: FfiConverterRustBuffer<TzTime> {
    override fun read(buf: ByteBuffer): TzTime {
        return TzTime(
            FfiConverterTimestamp.read(buf),
            FfiConverterString.read(buf),
            FfiConverterInt.read(buf),
        )
    }

    override fun allocationSize(value: TzTime) = (
            FfiConverterTimestamp.allocationSize(value.`time`) +
            FfiConverterString.allocationSize(value.`timezoneId`) +
            FfiConverterInt.allocationSize(value.`timezoneUtcOffsetSecs`)
    )

    override fun write(value: TzTime, buf: ByteBuffer) {
            FfiConverterTimestamp.write(value.`time`, buf)
            FfiConverterString.write(value.`timezoneId`, buf)
            FfiConverterInt.write(value.`timezoneUtcOffsetSecs`, buf)
    }
}



sealed class Activity {
    
    data class PaymentActivity(
        
        val `payment`: Payment
        ) : Activity() {
        companion object
    }
    
    data class ChannelCloseActivity(
        
        val `channelClose`: ChannelClose
        ) : Activity() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeActivity : FfiConverterRustBuffer<Activity>{
    override fun read(buf: ByteBuffer): Activity {
        return when(buf.getInt()) {
            1 -> Activity.PaymentActivity(
                FfiConverterTypePayment.read(buf),
                )
            2 -> Activity.ChannelCloseActivity(
                FfiConverterTypeChannelClose.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Activity) = when(value) {
        is Activity.PaymentActivity -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypePayment.allocationSize(value.`payment`)
            )
        }
        is Activity.ChannelCloseActivity -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeChannelClose.allocationSize(value.`channelClose`)
            )
        }
    }

    override fun write(value: Activity, buf: ByteBuffer) {
        when(value) {
            is Activity.PaymentActivity -> {
                buf.putInt(1)
                FfiConverterTypePayment.write(value.`payment`, buf)
                Unit
            }
            is Activity.ChannelCloseActivity -> {
                buf.putInt(2)
                FfiConverterTypeChannelClose.write(value.`channelClose`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





enum class BreezHealthCheckStatus {
    
    OPERATIONAL,
    MAINTENANCE,
    SERVICE_DISRUPTION;
    companion object
}

public object FfiConverterTypeBreezHealthCheckStatus: FfiConverterRustBuffer<BreezHealthCheckStatus> {
    override fun read(buf: ByteBuffer) = try {
        BreezHealthCheckStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: BreezHealthCheckStatus) = 4

    override fun write(value: BreezHealthCheckStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





enum class ChannelCloseState {
    
    PENDING,
    CONFIRMED;
    companion object
}

public object FfiConverterTypeChannelCloseState: FfiConverterRustBuffer<ChannelCloseState> {
    override fun read(buf: ByteBuffer) = try {
        ChannelCloseState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ChannelCloseState) = 4

    override fun write(value: ChannelCloseState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class DecodeDataException: Exception() {
    
    class LnUrlException(
        
        val `msg`: String
        ) : DecodeDataException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class Unsupported(
        
        val `typ`: UnsupportedDataType
        ) : DecodeDataException() {
        override val message
            get() = "typ=${ `typ` }"
    }
    
    class Unrecognized(
        
        val `msg`: String
        ) : DecodeDataException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DecodeDataException> {
        override fun lift(error_buf: RustBuffer.ByValue): DecodeDataException = FfiConverterTypeDecodeDataError.lift(error_buf)
    }

    
}

public object FfiConverterTypeDecodeDataError : FfiConverterRustBuffer<DecodeDataException> {
    override fun read(buf: ByteBuffer): DecodeDataException {
        

        return when(buf.getInt()) {
            1 -> DecodeDataException.LnUrlException(
                FfiConverterString.read(buf),
                )
            2 -> DecodeDataException.Unsupported(
                FfiConverterTypeUnsupportedDataType.read(buf),
                )
            3 -> DecodeDataException.Unrecognized(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DecodeDataException): Int {
        return when(value) {
            is DecodeDataException.LnUrlException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is DecodeDataException.Unsupported -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterTypeUnsupportedDataType.allocationSize(value.`typ`)
            )
            is DecodeDataException.Unrecognized -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
        }
    }

    override fun write(value: DecodeDataException, buf: ByteBuffer) {
        when(value) {
            is DecodeDataException.LnUrlException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is DecodeDataException.Unsupported -> {
                buf.putInt(2)
                FfiConverterTypeUnsupportedDataType.write(value.`typ`, buf)
                Unit
            }
            is DecodeDataException.Unrecognized -> {
                buf.putInt(3)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



sealed class DecodedData {
    
    data class Bolt11Invoice(
        
        val `invoiceDetails`: InvoiceDetails
        ) : DecodedData() {
        companion object
    }
    
    data class LnUrlPay(
        
        val `lnurlPayDetails`: LnUrlPayDetails
        ) : DecodedData() {
        companion object
    }
    
    data class LnUrlWithdraw(
        
        val `lnurlWithdrawDetails`: LnUrlWithdrawDetails
        ) : DecodedData() {
        companion object
    }
    
    data class OnchainAddress(
        
        val `onchainAddressDetails`: BitcoinAddressData
        ) : DecodedData() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeDecodedData : FfiConverterRustBuffer<DecodedData>{
    override fun read(buf: ByteBuffer): DecodedData {
        return when(buf.getInt()) {
            1 -> DecodedData.Bolt11Invoice(
                FfiConverterTypeInvoiceDetails.read(buf),
                )
            2 -> DecodedData.LnUrlPay(
                FfiConverterTypeLnUrlPayDetails.read(buf),
                )
            3 -> DecodedData.LnUrlWithdraw(
                FfiConverterTypeLnUrlWithdrawDetails.read(buf),
                )
            4 -> DecodedData.OnchainAddress(
                FfiConverterTypeBitcoinAddressData.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DecodedData) = when(value) {
        is DecodedData.Bolt11Invoice -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeInvoiceDetails.allocationSize(value.`invoiceDetails`)
            )
        }
        is DecodedData.LnUrlPay -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeLnUrlPayDetails.allocationSize(value.`lnurlPayDetails`)
            )
        }
        is DecodedData.LnUrlWithdraw -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeLnUrlWithdrawDetails.allocationSize(value.`lnurlWithdrawDetails`)
            )
        }
        is DecodedData.OnchainAddress -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeBitcoinAddressData.allocationSize(value.`onchainAddressDetails`)
            )
        }
    }

    override fun write(value: DecodedData, buf: ByteBuffer) {
        when(value) {
            is DecodedData.Bolt11Invoice -> {
                buf.putInt(1)
                FfiConverterTypeInvoiceDetails.write(value.`invoiceDetails`, buf)
                Unit
            }
            is DecodedData.LnUrlPay -> {
                buf.putInt(2)
                FfiConverterTypeLnUrlPayDetails.write(value.`lnurlPayDetails`, buf)
                Unit
            }
            is DecodedData.LnUrlWithdraw -> {
                buf.putInt(3)
                FfiConverterTypeLnUrlWithdrawDetails.write(value.`lnurlWithdrawDetails`, buf)
                Unit
            }
            is DecodedData.OnchainAddress -> {
                buf.putInt(4)
                FfiConverterTypeBitcoinAddressData.write(value.`onchainAddressDetails`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





enum class EnvironmentCode {
    
    LOCAL,
    DEV,
    STAGE,
    PROD;
    companion object
}

public object FfiConverterTypeEnvironmentCode: FfiConverterRustBuffer<EnvironmentCode> {
    override fun read(buf: ByteBuffer) = try {
        EnvironmentCode.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: EnvironmentCode) = 4

    override fun write(value: EnvironmentCode, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





enum class InvoiceAffordability {
    
    NOT_ENOUGH_FUNDS,
    UNAFFORDABLE_FEES,
    AFFORDABLE;
    companion object
}

public object FfiConverterTypeInvoiceAffordability: FfiConverterRustBuffer<InvoiceAffordability> {
    override fun read(buf: ByteBuffer) = try {
        InvoiceAffordability.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: InvoiceAffordability) = 4

    override fun write(value: InvoiceAffordability, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class LiquidityLimit {
    
    object None : LiquidityLimit()
    
    
    data class MaxFreeReceive(
        
        val `amount`: Amount
        ) : LiquidityLimit() {
        companion object
    }
    
    data class MinReceive(
        
        val `amount`: Amount
        ) : LiquidityLimit() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeLiquidityLimit : FfiConverterRustBuffer<LiquidityLimit>{
    override fun read(buf: ByteBuffer): LiquidityLimit {
        return when(buf.getInt()) {
            1 -> LiquidityLimit.None
            2 -> LiquidityLimit.MaxFreeReceive(
                FfiConverterTypeAmount.read(buf),
                )
            3 -> LiquidityLimit.MinReceive(
                FfiConverterTypeAmount.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: LiquidityLimit) = when(value) {
        is LiquidityLimit.None -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is LiquidityLimit.MaxFreeReceive -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeAmount.allocationSize(value.`amount`)
            )
        }
        is LiquidityLimit.MinReceive -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeAmount.allocationSize(value.`amount`)
            )
        }
    }

    override fun write(value: LiquidityLimit, buf: ByteBuffer) {
        when(value) {
            is LiquidityLimit.None -> {
                buf.putInt(1)
                Unit
            }
            is LiquidityLimit.MaxFreeReceive -> {
                buf.putInt(2)
                FfiConverterTypeAmount.write(value.`amount`, buf)
                Unit
            }
            is LiquidityLimit.MinReceive -> {
                buf.putInt(3)
                FfiConverterTypeAmount.write(value.`amount`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class LnException: Exception() {
    
    class InvalidInput(
        
        val `msg`: String
        ) : LnException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class RuntimeException(
        
        val `code`: RuntimeErrorCode, 
        
        val `msg`: String
        ) : LnException() {
        override val message
            get() = "code=${ `code` }, msg=${ `msg` }"
    }
    
    class PermanentFailure(
        
        val `msg`: String
        ) : LnException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<LnException> {
        override fun lift(error_buf: RustBuffer.ByValue): LnException = FfiConverterTypeLnError.lift(error_buf)
    }

    
}

public object FfiConverterTypeLnError : FfiConverterRustBuffer<LnException> {
    override fun read(buf: ByteBuffer): LnException {
        

        return when(buf.getInt()) {
            1 -> LnException.InvalidInput(
                FfiConverterString.read(buf),
                )
            2 -> LnException.RuntimeException(
                FfiConverterTypeRuntimeErrorCode.read(buf),
                FfiConverterString.read(buf),
                )
            3 -> LnException.PermanentFailure(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: LnException): Int {
        return when(value) {
            is LnException.InvalidInput -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is LnException.RuntimeException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterTypeRuntimeErrorCode.allocationSize(value.`code`)
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is LnException.PermanentFailure -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
        }
    }

    override fun write(value: LnException, buf: ByteBuffer) {
        when(value) {
            is LnException.InvalidInput -> {
                buf.putInt(1)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is LnException.RuntimeException -> {
                buf.putInt(2)
                FfiConverterTypeRuntimeErrorCode.write(value.`code`, buf)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is LnException.PermanentFailure -> {
                buf.putInt(3)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class LnUrlPayException: Exception() {
    
    class InvalidInput(
        
        val `msg`: String
        ) : LnUrlPayException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class RuntimeException(
        
        val `code`: LnUrlPayErrorCode, 
        
        val `msg`: String
        ) : LnUrlPayException() {
        override val message
            get() = "code=${ `code` }, msg=${ `msg` }"
    }
    
    class PermanentFailure(
        
        val `msg`: String
        ) : LnUrlPayException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<LnUrlPayException> {
        override fun lift(error_buf: RustBuffer.ByValue): LnUrlPayException = FfiConverterTypeLnUrlPayError.lift(error_buf)
    }

    
}

public object FfiConverterTypeLnUrlPayError : FfiConverterRustBuffer<LnUrlPayException> {
    override fun read(buf: ByteBuffer): LnUrlPayException {
        

        return when(buf.getInt()) {
            1 -> LnUrlPayException.InvalidInput(
                FfiConverterString.read(buf),
                )
            2 -> LnUrlPayException.RuntimeException(
                FfiConverterTypeLnUrlPayErrorCode.read(buf),
                FfiConverterString.read(buf),
                )
            3 -> LnUrlPayException.PermanentFailure(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: LnUrlPayException): Int {
        return when(value) {
            is LnUrlPayException.InvalidInput -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is LnUrlPayException.RuntimeException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterTypeLnUrlPayErrorCode.allocationSize(value.`code`)
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is LnUrlPayException.PermanentFailure -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
        }
    }

    override fun write(value: LnUrlPayException, buf: ByteBuffer) {
        when(value) {
            is LnUrlPayException.InvalidInput -> {
                buf.putInt(1)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is LnUrlPayException.RuntimeException -> {
                buf.putInt(2)
                FfiConverterTypeLnUrlPayErrorCode.write(value.`code`, buf)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is LnUrlPayException.PermanentFailure -> {
                buf.putInt(3)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



enum class LnUrlPayErrorCode {
    
    LN_URL_SERVER_ERROR,
    NO_ROUTE_FOUND,
    PAYMENT_FAILED,
    PAYMENT_TIMEOUT,
    ROUTE_TOO_EXPENSIVE,
    UNEXPECTED_ERROR,
    SERVICE_CONNECTIVITY,
    INVALID_NETWORK;
    companion object
}

public object FfiConverterTypeLnUrlPayErrorCode: FfiConverterRustBuffer<LnUrlPayErrorCode> {
    override fun read(buf: ByteBuffer) = try {
        LnUrlPayErrorCode.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: LnUrlPayErrorCode) = 4

    override fun write(value: LnUrlPayErrorCode, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class MaxRoutingFeeMode {
    
    data class Relative(
        
        val `maxFeePermyriad`: UShort
        ) : MaxRoutingFeeMode() {
        companion object
    }
    
    data class Absolute(
        
        val `maxFeeAmount`: Amount
        ) : MaxRoutingFeeMode() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeMaxRoutingFeeMode : FfiConverterRustBuffer<MaxRoutingFeeMode>{
    override fun read(buf: ByteBuffer): MaxRoutingFeeMode {
        return when(buf.getInt()) {
            1 -> MaxRoutingFeeMode.Relative(
                FfiConverterUShort.read(buf),
                )
            2 -> MaxRoutingFeeMode.Absolute(
                FfiConverterTypeAmount.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MaxRoutingFeeMode) = when(value) {
        is MaxRoutingFeeMode.Relative -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterUShort.allocationSize(value.`maxFeePermyriad`)
            )
        }
        is MaxRoutingFeeMode.Absolute -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeAmount.allocationSize(value.`maxFeeAmount`)
            )
        }
    }

    override fun write(value: MaxRoutingFeeMode, buf: ByteBuffer) {
        when(value) {
            is MaxRoutingFeeMode.Relative -> {
                buf.putInt(1)
                FfiConverterUShort.write(value.`maxFeePermyriad`, buf)
                Unit
            }
            is MaxRoutingFeeMode.Absolute -> {
                buf.putInt(2)
                FfiConverterTypeAmount.write(value.`maxFeeAmount`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class MnemonicException: Exception() {
    
    class BadWordCount(
        
        val `count`: ULong
        ) : MnemonicException() {
        override val message
            get() = "count=${ `count` }"
    }
    
    class UnknownWord(
        
        val `index`: ULong
        ) : MnemonicException() {
        override val message
            get() = "index=${ `index` }"
    }
    
    class BadEntropyBitCount(
        ) : MnemonicException() {
        override val message
            get() = ""
    }
    
    class InvalidChecksum(
        ) : MnemonicException() {
        override val message
            get() = ""
    }
    
    class AmbiguousLanguages(
        ) : MnemonicException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<MnemonicException> {
        override fun lift(error_buf: RustBuffer.ByValue): MnemonicException = FfiConverterTypeMnemonicError.lift(error_buf)
    }

    
}

public object FfiConverterTypeMnemonicError : FfiConverterRustBuffer<MnemonicException> {
    override fun read(buf: ByteBuffer): MnemonicException {
        

        return when(buf.getInt()) {
            1 -> MnemonicException.BadWordCount(
                FfiConverterULong.read(buf),
                )
            2 -> MnemonicException.UnknownWord(
                FfiConverterULong.read(buf),
                )
            3 -> MnemonicException.BadEntropyBitCount()
            4 -> MnemonicException.InvalidChecksum()
            5 -> MnemonicException.AmbiguousLanguages()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MnemonicException): Int {
        return when(value) {
            is MnemonicException.BadWordCount -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterULong.allocationSize(value.`count`)
            )
            is MnemonicException.UnknownWord -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterULong.allocationSize(value.`index`)
            )
            is MnemonicException.BadEntropyBitCount -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
            )
            is MnemonicException.InvalidChecksum -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
            )
            is MnemonicException.AmbiguousLanguages -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
            )
        }
    }

    override fun write(value: MnemonicException, buf: ByteBuffer) {
        when(value) {
            is MnemonicException.BadWordCount -> {
                buf.putInt(1)
                FfiConverterULong.write(value.`count`, buf)
                Unit
            }
            is MnemonicException.UnknownWord -> {
                buf.putInt(2)
                FfiConverterULong.write(value.`index`, buf)
                Unit
            }
            is MnemonicException.BadEntropyBitCount -> {
                buf.putInt(3)
                Unit
            }
            is MnemonicException.InvalidChecksum -> {
                buf.putInt(4)
                Unit
            }
            is MnemonicException.AmbiguousLanguages -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



enum class Network {
    
    BITCOIN,
    TESTNET,
    SIGNET,
    REGTEST;
    companion object
}

public object FfiConverterTypeNetwork: FfiConverterRustBuffer<Network> {
    override fun read(buf: ByteBuffer) = try {
        Network.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: Network) = 4

    override fun write(value: Network, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class OfferKind {
    
    data class Pocket(
        
        val `id`: String, 
        
        val `exchangeRate`: ExchangeRate, 
        
        val `topupValueMinorUnits`: ULong, 
        
        val `topupValueSats`: ULong?, 
        
        val `exchangeFeeMinorUnits`: ULong, 
        
        val `exchangeFeeRatePermyriad`: UShort, 
        
        val `lightningPayoutFee`: Amount?, 
        
        val `error`: PocketOfferError?
        ) : OfferKind() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeOfferKind : FfiConverterRustBuffer<OfferKind>{
    override fun read(buf: ByteBuffer): OfferKind {
        return when(buf.getInt()) {
            1 -> OfferKind.Pocket(
                FfiConverterString.read(buf),
                FfiConverterTypeExchangeRate.read(buf),
                FfiConverterULong.read(buf),
                FfiConverterOptionalULong.read(buf),
                FfiConverterULong.read(buf),
                FfiConverterUShort.read(buf),
                FfiConverterOptionalTypeAmount.read(buf),
                FfiConverterOptionalTypePocketOfferError.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: OfferKind) = when(value) {
        is OfferKind.Pocket -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`id`)
                + FfiConverterTypeExchangeRate.allocationSize(value.`exchangeRate`)
                + FfiConverterULong.allocationSize(value.`topupValueMinorUnits`)
                + FfiConverterOptionalULong.allocationSize(value.`topupValueSats`)
                + FfiConverterULong.allocationSize(value.`exchangeFeeMinorUnits`)
                + FfiConverterUShort.allocationSize(value.`exchangeFeeRatePermyriad`)
                + FfiConverterOptionalTypeAmount.allocationSize(value.`lightningPayoutFee`)
                + FfiConverterOptionalTypePocketOfferError.allocationSize(value.`error`)
            )
        }
    }

    override fun write(value: OfferKind, buf: ByteBuffer) {
        when(value) {
            is OfferKind.Pocket -> {
                buf.putInt(1)
                FfiConverterString.write(value.`id`, buf)
                FfiConverterTypeExchangeRate.write(value.`exchangeRate`, buf)
                FfiConverterULong.write(value.`topupValueMinorUnits`, buf)
                FfiConverterOptionalULong.write(value.`topupValueSats`, buf)
                FfiConverterULong.write(value.`exchangeFeeMinorUnits`, buf)
                FfiConverterUShort.write(value.`exchangeFeeRatePermyriad`, buf)
                FfiConverterOptionalTypeAmount.write(value.`lightningPayoutFee`, buf)
                FfiConverterOptionalTypePocketOfferError.write(value.`error`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





enum class OfferStatus {
    
    READY,
    FAILED,
    REFUNDED,
    SETTLED;
    companion object
}

public object FfiConverterTypeOfferStatus: FfiConverterRustBuffer<OfferStatus> {
    override fun read(buf: ByteBuffer) = try {
        OfferStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: OfferStatus) = 4

    override fun write(value: OfferStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class PayException: Exception() {
    
    class InvalidInput(
        
        val `msg`: String
        ) : PayException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class RuntimeException(
        
        val `code`: PayErrorCode, 
        
        val `msg`: String
        ) : PayException() {
        override val message
            get() = "code=${ `code` }, msg=${ `msg` }"
    }
    
    class PermanentFailure(
        
        val `msg`: String
        ) : PayException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<PayException> {
        override fun lift(error_buf: RustBuffer.ByValue): PayException = FfiConverterTypePayError.lift(error_buf)
    }

    
}

public object FfiConverterTypePayError : FfiConverterRustBuffer<PayException> {
    override fun read(buf: ByteBuffer): PayException {
        

        return when(buf.getInt()) {
            1 -> PayException.InvalidInput(
                FfiConverterString.read(buf),
                )
            2 -> PayException.RuntimeException(
                FfiConverterTypePayErrorCode.read(buf),
                FfiConverterString.read(buf),
                )
            3 -> PayException.PermanentFailure(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: PayException): Int {
        return when(value) {
            is PayException.InvalidInput -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is PayException.RuntimeException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterTypePayErrorCode.allocationSize(value.`code`)
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is PayException.PermanentFailure -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
        }
    }

    override fun write(value: PayException, buf: ByteBuffer) {
        when(value) {
            is PayException.InvalidInput -> {
                buf.putInt(1)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is PayException.RuntimeException -> {
                buf.putInt(2)
                FfiConverterTypePayErrorCode.write(value.`code`, buf)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is PayException.PermanentFailure -> {
                buf.putInt(3)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



enum class PayErrorCode {
    
    ALREADY_USED_INVOICE,
    INVOICE_EXPIRED,
    NO_ROUTE_FOUND,
    PAYING_TO_SELF,
    PAYMENT_FAILED,
    PAYMENT_TIMEOUT,
    ROUTE_TOO_EXPENSIVE,
    NODE_UNAVAILABLE,
    UNEXPECTED_ERROR;
    companion object
}

public object FfiConverterTypePayErrorCode: FfiConverterRustBuffer<PayErrorCode> {
    override fun read(buf: ByteBuffer) = try {
        PayErrorCode.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PayErrorCode) = 4

    override fun write(value: PayErrorCode, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





enum class PaymentSource {
    
    CAMERA,
    CLIPBOARD,
    NFC,
    MANUAL;
    companion object
}

public object FfiConverterTypePaymentSource: FfiConverterRustBuffer<PaymentSource> {
    override fun read(buf: ByteBuffer) = try {
        PaymentSource.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaymentSource) = 4

    override fun write(value: PaymentSource, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





enum class PaymentState {
    
    CREATED,
    SUCCEEDED,
    FAILED,
    RETRIED,
    INVOICE_EXPIRED;
    companion object
}

public object FfiConverterTypePaymentState: FfiConverterRustBuffer<PaymentState> {
    override fun read(buf: ByteBuffer) = try {
        PaymentState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaymentState) = 4

    override fun write(value: PaymentState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





enum class PaymentType {
    
    RECEIVING,
    SENDING;
    companion object
}

public object FfiConverterTypePaymentType: FfiConverterRustBuffer<PaymentType> {
    override fun read(buf: ByteBuffer) = try {
        PaymentType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaymentType) = 4

    override fun write(value: PaymentType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





enum class PermanentFailureCode {
    
    THRESHOLD_EXCEEDED,
    ORDER_INACTIVE,
    COMPANIES_UNSUPPORTED,
    COUNTRY_UNSUPPORTED,
    OTHER_RISK_DETECTED,
    CUSTOMER_REQUESTED,
    ACCOUNT_NOT_MATCHING,
    PAYOUT_EXPIRED;
    companion object
}

public object FfiConverterTypePermanentFailureCode: FfiConverterRustBuffer<PermanentFailureCode> {
    override fun read(buf: ByteBuffer) = try {
        PermanentFailureCode.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PermanentFailureCode) = 4

    override fun write(value: PermanentFailureCode, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class PocketOfferError {
    
    data class TemporaryFailure(
        
        val `code`: TemporaryFailureCode
        ) : PocketOfferError() {
        companion object
    }
    
    data class PermanentFailure(
        
        val `code`: PermanentFailureCode
        ) : PocketOfferError() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypePocketOfferError : FfiConverterRustBuffer<PocketOfferError>{
    override fun read(buf: ByteBuffer): PocketOfferError {
        return when(buf.getInt()) {
            1 -> PocketOfferError.TemporaryFailure(
                FfiConverterTypeTemporaryFailureCode.read(buf),
                )
            2 -> PocketOfferError.PermanentFailure(
                FfiConverterTypePermanentFailureCode.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: PocketOfferError) = when(value) {
        is PocketOfferError.TemporaryFailure -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeTemporaryFailureCode.allocationSize(value.`code`)
            )
        }
        is PocketOfferError.PermanentFailure -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypePermanentFailureCode.allocationSize(value.`code`)
            )
        }
    }

    override fun write(value: PocketOfferError, buf: ByteBuffer) {
        when(value) {
            is PocketOfferError.TemporaryFailure -> {
                buf.putInt(1)
                FfiConverterTypeTemporaryFailureCode.write(value.`code`, buf)
                Unit
            }
            is PocketOfferError.PermanentFailure -> {
                buf.putInt(2)
                FfiConverterTypePermanentFailureCode.write(value.`code`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class Recipient {
    
    data class LightningAddress(
        
        val `address`: String
        ) : Recipient() {
        companion object
    }
    
    object Unknown : Recipient()
    
    

    
    companion object
}

public object FfiConverterTypeRecipient : FfiConverterRustBuffer<Recipient>{
    override fun read(buf: ByteBuffer): Recipient {
        return when(buf.getInt()) {
            1 -> Recipient.LightningAddress(
                FfiConverterString.read(buf),
                )
            2 -> Recipient.Unknown
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Recipient) = when(value) {
        is Recipient.LightningAddress -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`address`)
            )
        }
        is Recipient.Unknown -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
    }

    override fun write(value: Recipient, buf: ByteBuffer) {
        when(value) {
            is Recipient.LightningAddress -> {
                buf.putInt(1)
                FfiConverterString.write(value.`address`, buf)
                Unit
            }
            is Recipient.Unknown -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





enum class RuntimeErrorCode {
    
    AUTH_SERVICE_UNAVAILABLE,
    OFFER_SERVICE_UNAVAILABLE,
    LSP_SERVICE_UNAVAILABLE,
    BACKUP_SERVICE_UNAVAILABLE,
    BACKUP_NOT_FOUND,
    NO_ON_CHAIN_FUNDS_TO_RESOLVE,
    NODE_UNAVAILABLE,
    FAILED_FUND_MIGRATION;
    companion object
}

public object FfiConverterTypeRuntimeErrorCode: FfiConverterRustBuffer<RuntimeErrorCode> {
    override fun read(buf: ByteBuffer) = try {
        RuntimeErrorCode.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: RuntimeErrorCode) = 4

    override fun write(value: RuntimeErrorCode, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class SimpleException: Exception() {
    
    class Simple(
        
        val `msg`: String
        ) : SimpleException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SimpleException> {
        override fun lift(error_buf: RustBuffer.ByValue): SimpleException = FfiConverterTypeSimpleError.lift(error_buf)
    }

    
}

public object FfiConverterTypeSimpleError : FfiConverterRustBuffer<SimpleException> {
    override fun read(buf: ByteBuffer): SimpleException {
        

        return when(buf.getInt()) {
            1 -> SimpleException.Simple(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SimpleException): Int {
        return when(value) {
            is SimpleException.Simple -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
        }
    }

    override fun write(value: SimpleException, buf: ByteBuffer) {
        when(value) {
            is SimpleException.Simple -> {
                buf.putInt(1)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class SwapException: Exception() {
    
    class Generic(
        
        val `err`: String
        ) : SwapException() {
        override val message
            get() = "err=${ `err` }"
    }
    
    class ServiceConnectivity(
        
        val `err`: String
        ) : SwapException() {
        override val message
            get() = "err=${ `err` }"
    }
    
    class SwapInProgress(
        
        val `err`: String
        ) : SwapException() {
        override val message
            get() = "err=${ `err` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SwapException> {
        override fun lift(error_buf: RustBuffer.ByValue): SwapException = FfiConverterTypeSwapError.lift(error_buf)
    }

    
}

public object FfiConverterTypeSwapError : FfiConverterRustBuffer<SwapException> {
    override fun read(buf: ByteBuffer): SwapException {
        

        return when(buf.getInt()) {
            1 -> SwapException.Generic(
                FfiConverterString.read(buf),
                )
            2 -> SwapException.ServiceConnectivity(
                FfiConverterString.read(buf),
                )
            3 -> SwapException.SwapInProgress(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SwapException): Int {
        return when(value) {
            is SwapException.Generic -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`err`)
            )
            is SwapException.ServiceConnectivity -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`err`)
            )
            is SwapException.SwapInProgress -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`err`)
            )
        }
    }

    override fun write(value: SwapException, buf: ByteBuffer) {
        when(value) {
            is SwapException.Generic -> {
                buf.putInt(1)
                FfiConverterString.write(value.`err`, buf)
                Unit
            }
            is SwapException.ServiceConnectivity -> {
                buf.putInt(2)
                FfiConverterString.write(value.`err`, buf)
                Unit
            }
            is SwapException.SwapInProgress -> {
                buf.putInt(3)
                FfiConverterString.write(value.`err`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



sealed class TemporaryFailureCode {
    
    object NoRoute : TemporaryFailureCode()
    
    
    object InvoiceExpired : TemporaryFailureCode()
    
    
    object Unexpected : TemporaryFailureCode()
    
    
    data class Unknown(
        
        val `msg`: String
        ) : TemporaryFailureCode() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeTemporaryFailureCode : FfiConverterRustBuffer<TemporaryFailureCode>{
    override fun read(buf: ByteBuffer): TemporaryFailureCode {
        return when(buf.getInt()) {
            1 -> TemporaryFailureCode.NoRoute
            2 -> TemporaryFailureCode.InvoiceExpired
            3 -> TemporaryFailureCode.Unexpected
            4 -> TemporaryFailureCode.Unknown(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: TemporaryFailureCode) = when(value) {
        is TemporaryFailureCode.NoRoute -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is TemporaryFailureCode.InvoiceExpired -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is TemporaryFailureCode.Unexpected -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is TemporaryFailureCode.Unknown -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
        }
    }

    override fun write(value: TemporaryFailureCode, buf: ByteBuffer) {
        when(value) {
            is TemporaryFailureCode.NoRoute -> {
                buf.putInt(1)
                Unit
            }
            is TemporaryFailureCode.InvoiceExpired -> {
                buf.putInt(2)
                Unit
            }
            is TemporaryFailureCode.Unexpected -> {
                buf.putInt(3)
                Unit
            }
            is TemporaryFailureCode.Unknown -> {
                buf.putInt(4)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





enum class TermsAndConditions {
    
    LIPA,
    POCKET;
    companion object
}

public object FfiConverterTypeTermsAndConditions: FfiConverterRustBuffer<TermsAndConditions> {
    override fun read(buf: ByteBuffer) = try {
        TermsAndConditions.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: TermsAndConditions) = 4

    override fun write(value: TermsAndConditions, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class UnsupportedDataType {
    
    object BitcoinAddress : UnsupportedDataType()
    
    
    object LnUrlAuth : UnsupportedDataType()
    
    
    object NodeId : UnsupportedDataType()
    
    
    object Url : UnsupportedDataType()
    
    
    data class Network(
        
        val `network`: String
        ) : UnsupportedDataType() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeUnsupportedDataType : FfiConverterRustBuffer<UnsupportedDataType>{
    override fun read(buf: ByteBuffer): UnsupportedDataType {
        return when(buf.getInt()) {
            1 -> UnsupportedDataType.BitcoinAddress
            2 -> UnsupportedDataType.LnUrlAuth
            3 -> UnsupportedDataType.NodeId
            4 -> UnsupportedDataType.Url
            5 -> UnsupportedDataType.Network(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: UnsupportedDataType) = when(value) {
        is UnsupportedDataType.BitcoinAddress -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is UnsupportedDataType.LnUrlAuth -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is UnsupportedDataType.NodeId -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is UnsupportedDataType.Url -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is UnsupportedDataType.Network -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`network`)
            )
        }
    }

    override fun write(value: UnsupportedDataType, buf: ByteBuffer) {
        when(value) {
            is UnsupportedDataType.BitcoinAddress -> {
                buf.putInt(1)
                Unit
            }
            is UnsupportedDataType.LnUrlAuth -> {
                buf.putInt(2)
                Unit
            }
            is UnsupportedDataType.NodeId -> {
                buf.putInt(3)
                Unit
            }
            is UnsupportedDataType.Url -> {
                buf.putInt(4)
                Unit
            }
            is UnsupportedDataType.Network -> {
                buf.putInt(5)
                FfiConverterString.write(value.`network`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







public interface EventsCallback {
    
    fun `paymentReceived`(`paymentHash`: String)
    
    fun `paymentSent`(`paymentHash`: String, `paymentPreimage`: String)
    
    fun `paymentFailed`(`paymentHash`: String)
    
    fun `channelClosed`(`channelId`: String, `reason`: String)
    
    fun `breezHealthStatusChangedTo`(`status`: BreezHealthCheckStatus)
    
    companion object
}


internal typealias UniffiHandle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<UniffiHandle, T> = mutableMapOf(),
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): UniffiHandle =
        lock.withLock {
            currentHandle.getAndAdd(stride)
                .also { handle ->
                    leftMap[handle] = obj
                }
            }

    fun get(handle: UniffiHandle) = lock.withLock {
        leftMap[handle] ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    fun delete(handle: UniffiHandle) {
        this.remove(handle)
    }

    fun remove(handle: UniffiHandle): T? =
        lock.withLock {
            leftMap.remove(handle)
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

public abstract class FfiConverterCallbackInterface<CallbackInterface>: FfiConverter<CallbackInterface, UniffiHandle> {
    internal val handleMap = ConcurrentHandleMap<CallbackInterface>()

    internal fun drop(handle: UniffiHandle) {
        handleMap.remove(handle)
    }

    override fun lift(value: UniffiHandle): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Implement the foreign callback handler for EventsCallback
internal class UniffiCallbackInterfaceEventsCallback : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeEventsCallback.handleMap.get(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeEventsCallback.handleMap.remove(handle)

                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokePaymentReceived`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokePaymentSent`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            3 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokePaymentFailed`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            4 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeChannelClosed`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            5 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeBreezHealthStatusChangedTo`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }

    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokePaymentReceived`(kotlinCallbackInterface: EventsCallback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`paymentReceived`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokePaymentSent`(kotlinCallbackInterface: EventsCallback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`paymentSent`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokePaymentFailed`(kotlinCallbackInterface: EventsCallback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`paymentFailed`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeChannelClosed`(kotlinCallbackInterface: EventsCallback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`channelClosed`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeBreezHealthStatusChangedTo`(kotlinCallbackInterface: EventsCallback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`breezHealthStatusChangedTo`(
                FfiConverterTypeBreezHealthCheckStatus.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_uniffi_lipalightninglib_fn_init_callback_eventscallback(this)
    }
}

internal val uniffiCallbackInterfaceEventsCallback = UniffiCallbackInterfaceEventsCallback()

// The ffiConverter which transforms the Callbacks in to UniffiHandles to pass to Rust.
public object FfiConverterTypeEventsCallback: FfiConverterCallbackInterface<EventsCallback>()




public object FfiConverterOptionalULong: FfiConverterRustBuffer<ULong?> {
    override fun read(buf: ByteBuffer): ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: ULong?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTimestamp: FfiConverterRustBuffer<java.time.Instant?> {
    override fun read(buf: ByteBuffer): java.time.Instant? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTimestamp.read(buf)
    }

    override fun allocationSize(value: java.time.Instant?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTimestamp.allocationSize(value)
        }
    }

    override fun write(value: java.time.Instant?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTimestamp.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeAmount: FfiConverterRustBuffer<Amount?> {
    override fun read(buf: ByteBuffer): Amount? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAmount.read(buf)
    }

    override fun allocationSize(value: Amount?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeAmount.allocationSize(value)
        }
    }

    override fun write(value: Amount?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAmount.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeExchangeRate: FfiConverterRustBuffer<ExchangeRate?> {
    override fun read(buf: ByteBuffer): ExchangeRate? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeExchangeRate.read(buf)
    }

    override fun allocationSize(value: ExchangeRate?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeExchangeRate.allocationSize(value)
        }
    }

    override fun write(value: ExchangeRate?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeExchangeRate.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeFiatTopupInfo: FfiConverterRustBuffer<FiatTopupInfo?> {
    override fun read(buf: ByteBuffer): FiatTopupInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFiatTopupInfo.read(buf)
    }

    override fun allocationSize(value: FiatTopupInfo?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeFiatTopupInfo.allocationSize(value)
        }
    }

    override fun write(value: FiatTopupInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFiatTopupInfo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeFiatValue: FfiConverterRustBuffer<FiatValue?> {
    override fun read(buf: ByteBuffer): FiatValue? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFiatValue.read(buf)
    }

    override fun allocationSize(value: FiatValue?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeFiatValue.allocationSize(value)
        }
    }

    override fun write(value: FiatValue?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFiatValue.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeOpeningFeeParams: FfiConverterRustBuffer<OpeningFeeParams?> {
    override fun read(buf: ByteBuffer): OpeningFeeParams? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeOpeningFeeParams.read(buf)
    }

    override fun allocationSize(value: OpeningFeeParams?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeOpeningFeeParams.allocationSize(value)
        }
    }

    override fun write(value: OpeningFeeParams?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeOpeningFeeParams.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSwapInfo: FfiConverterRustBuffer<SwapInfo?> {
    override fun read(buf: ByteBuffer): SwapInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSwapInfo.read(buf)
    }

    override fun allocationSize(value: SwapInfo?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSwapInfo.allocationSize(value)
        }
    }

    override fun write(value: SwapInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSwapInfo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSwapToLightningFees: FfiConverterRustBuffer<SwapToLightningFees?> {
    override fun read(buf: ByteBuffer): SwapToLightningFees? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSwapToLightningFees.read(buf)
    }

    override fun allocationSize(value: SwapToLightningFees?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSwapToLightningFees.allocationSize(value)
        }
    }

    override fun write(value: SwapToLightningFees?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSwapToLightningFees.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeTzTime: FfiConverterRustBuffer<TzTime?> {
    override fun read(buf: ByteBuffer): TzTime? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTzTime.read(buf)
    }

    override fun allocationSize(value: TzTime?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeTzTime.allocationSize(value)
        }
    }

    override fun write(value: TzTime?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTzTime.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeOfferKind: FfiConverterRustBuffer<OfferKind?> {
    override fun read(buf: ByteBuffer): OfferKind? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeOfferKind.read(buf)
    }

    override fun allocationSize(value: OfferKind?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeOfferKind.allocationSize(value)
        }
    }

    override fun write(value: OfferKind?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeOfferKind.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypePayErrorCode: FfiConverterRustBuffer<PayErrorCode?> {
    override fun read(buf: ByteBuffer): PayErrorCode? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePayErrorCode.read(buf)
    }

    override fun allocationSize(value: PayErrorCode?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypePayErrorCode.allocationSize(value)
        }
    }

    override fun write(value: PayErrorCode?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePayErrorCode.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypePocketOfferError: FfiConverterRustBuffer<PocketOfferError?> {
    override fun read(buf: ByteBuffer): PocketOfferError? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePocketOfferError.read(buf)
    }

    override fun allocationSize(value: PocketOfferError?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypePocketOfferError.allocationSize(value)
        }
    }

    override fun write(value: PocketOfferError?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePocketOfferError.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeRecipient: FfiConverterRustBuffer<Recipient?> {
    override fun read(buf: ByteBuffer): Recipient? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRecipient.read(buf)
    }

    override fun allocationSize(value: Recipient?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeRecipient.allocationSize(value)
        }
    }

    override fun write(value: Recipient?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRecipient.write(value, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFailedSwapInfo: FfiConverterRustBuffer<List<FailedSwapInfo>> {
    override fun read(buf: ByteBuffer): List<FailedSwapInfo> {
        val len = buf.getInt()
        return List<FailedSwapInfo>(len) {
            FfiConverterTypeFailedSwapInfo.read(buf)
        }
    }

    override fun allocationSize(value: List<FailedSwapInfo>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFailedSwapInfo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FailedSwapInfo>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFailedSwapInfo.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeOfferInfo: FfiConverterRustBuffer<List<OfferInfo>> {
    override fun read(buf: ByteBuffer): List<OfferInfo> {
        val len = buf.getInt()
        return List<OfferInfo>(len) {
            FfiConverterTypeOfferInfo.read(buf)
        }
    }

    override fun allocationSize(value: List<OfferInfo>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeOfferInfo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<OfferInfo>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeOfferInfo.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeActivity: FfiConverterRustBuffer<List<Activity>> {
    override fun read(buf: ByteBuffer): List<Activity> {
        val len = buf.getInt()
        return List<Activity>(len) {
            FfiConverterTypeActivity.read(buf)
        }
    }

    override fun allocationSize(value: List<Activity>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeActivity.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Activity>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeActivity.write(it, buf)
        }
    }
}
@Throws(LnException::class)

fun `acceptTermsAndConditions`(`environment`: EnvironmentCode, `seed`: ByteArray, `version`: Long) =
    
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_func_accept_terms_and_conditions(FfiConverterTypeEnvironmentCode.lower(`environment`),FfiConverterByteArray.lower(`seed`),FfiConverterLong.lower(`version`),_status)
}


@Throws(SimpleException::class)

fun `generateSecret`(`passphrase`: String): Secret {
    return FfiConverterTypeSecret.lift(
    uniffiRustCallWithError(SimpleException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_func_generate_secret(FfiConverterString.lower(`passphrase`),_status)
})
}

@Throws(LnException::class)

fun `getTermsAndConditionsStatus`(`environment`: EnvironmentCode, `seed`: ByteArray, `termsAndConditions`: TermsAndConditions): TermsAndConditionsStatus {
    return FfiConverterTypeTermsAndConditionsStatus.lift(
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_func_get_terms_and_conditions_status(FfiConverterTypeEnvironmentCode.lower(`environment`),FfiConverterByteArray.lower(`seed`),FfiConverterTypeTermsAndConditions.lower(`termsAndConditions`),_status)
})
}

@Throws(MnemonicException::class)

fun `mnemonicToSecret`(`mnemonicString`: List<String>, `passphrase`: String): Secret {
    return FfiConverterTypeSecret.lift(
    uniffiRustCallWithError(MnemonicException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_func_mnemonic_to_secret(FfiConverterSequenceString.lower(`mnemonicString`),FfiConverterString.lower(`passphrase`),_status)
})
}

@Throws(LnException::class)

fun `recoverLightningNode`(`environment`: EnvironmentCode, `seed`: ByteArray, `localPersistencePath`: String, `enableFileLogging`: Boolean) =
    
    uniffiRustCallWithError(LnException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_func_recover_lightning_node(FfiConverterTypeEnvironmentCode.lower(`environment`),FfiConverterByteArray.lower(`seed`),FfiConverterString.lower(`localPersistencePath`),FfiConverterBoolean.lower(`enableFileLogging`),_status)
}



fun `wordsByPrefix`(`prefix`: String): List<String> {
    return FfiConverterSequenceString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_lipalightninglib_fn_func_words_by_prefix(FfiConverterString.lower(`prefix`),_status)
})
}


